<div class="panel">
    <div class="panel-hdr">
        <h2><i class="fal fa-map-marked-alt fa-fw"></i> Mapa KMZ </h2>
    </div>
    <div class="panel-container" style="padding: 12px 15px;">
        <div class="row" style="padding-bottom:10px;">
            <div class="col-lg-12">
                Buscar:
                <div class="input-group" id="search-container">
                    <input type="text" class="form-control" placeholder="Buscar..." id="search-input" aria-label="Buscar ubicación Lat,Long..." aria-describedby="basic-addon2">
                    <div class="input-group-append">
                        <button class="btn btn-outline-primary" id="search-button" type="button">Buscar</button>
                    </div>
                </div>
            </div>



            <div class="col-lg-6">
                Mapas:
                @Html.DropDownList("Archivos", new SelectList(ViewBag.ListaArchivos, "Value", "Text"), null, new { @class = "form-control input-lg", @style = "width:100%;" })
            </div>
            <div class="col-lg-6">
                Archivo:
                <div class="form-group mb-0">
                    <div class="custom-file">
                        <input type="file" class="custom-file-input" id="customFile">
                        <label class="custom-file-label" for="customFile">Buscar Archivo</label>
                    </div>
                </div>
            </div>

        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="map-container">
                    <div id="map"></div>
                </div>
            </div>

        </div>

    </div>


</div>


@section Scripts {
    <script src='https://unpkg.com/maplibre-gl@4.1.3/dist/maplibre-gl.js'></script>
    <script src="~/Content/js/mapa/leaflet.js"></script>
    <script src="~/Content/js/mapa/togeojson.min.js"></script>
    <script src="~/Content/js/mapa/jszip.min.js"></script>
    <script src="~/Content/js/mapa/Control.Geocoder.js"></script>
    <script>
        $("#Archivos").select2().val(null).trigger("change");
        var map = null;


        const customStyle = {
            "version": 8,
            "sources": {
                "cartodb-dark-matter": {
                    "type": "raster",
                    "tiles": [
                        "https://a.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png",
                        "https://b.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png",
                        "https://c.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png",
                        "https://d.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png"
                    ],
                    //"tileSize": 256,
                    "maxzoom": 22,
                    "attribution": '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> © <a href="https://carto.com/attributions">CARTO</a>'
                }
            },
            "layers": [
                {
                    "id": "cartodb-dark-matter-layer",
                    "type": "raster",
                    "source": "cartodb-dark-matter",
                    "minzoom": 0,
                    "maxzoom": 22
                }
            ]
        };

        $(document).ready(function () {
            debugger;
            var height = window.innerHeight;
            $("#map").css("height", `${height - 350}px`);
            Mapa();

        });


        var polygonGeoJSON = {
            "type": "FeatureCollection",
            "features": []
        };





        function esCoordenada(query) {
            query = query.replaceAll(' ', '');
            var regex = /^-?\d+(\.\d+)?,-?\d+(\.\d+)?$/;
            return regex.test(query);
        }




        function Mapa() {

            var MAPTILER_KEY = 'CQjSsi4wjN5j99iwByjd';
            //map = new maplibregl.Map({
            //    style: `https://api.maptiler.com/maps/basic-v2/style.json?key=${MAPTILER_KEY}`,
            //    center: [-87.9828610499999, 15.508540420591633],
            //    zoom: 11.5,
            //    container: 'map',
            //    antialias: true,
                
            //});

            map = new maplibregl.Map({
                style: customStyle,
                center: [-87.9828610499999, 15.508540420591633],
                zoom: 11.5,
                container: 'map',
                antialias: true
            });

           

            map.setMaxZoom(21);


        }

        $("#Archivos").change(function () {
            limpiarMapaKML(map);
            $.ajax({
                url: "@Url.Action("CargarMapaMKZ","Soporte")",
                method: "get",
                data: { archivo: $("#Archivos").val() },
                success: function (kmlText) {

                    try {
                        // Parsear KML a DOM
                        const parser = new DOMParser();
                        const kmlDoc = parser.parseFromString(kmlText, 'text/xml');

                        // Convertir KML a GeoJSON (sin filtrar por tipo de geometría)
                        const geoJsonFeatures = toGeoJSON.kml(kmlDoc).features;

                        // Generar un ID único para la fuente
                        const sourceId = `kml-source-${Math.random().toString(36).substring(2)}`;

                        // Agregar el GeoJSON como fuente al mapa
                        map.addSource(sourceId, {
                            type: 'geojson',
                            data: {
                                type: 'FeatureCollection',
                                features: geoJsonFeatures
                            }
                        });

                        // Capa para polígonos (fill)
                        map.addLayer({
                            id: `${sourceId}-polygons`,
                            type: 'fill',
                            source: sourceId,
                            filter: ['==', '$type', 'Polygon'], // Filtrar solo polígonos
                            paint: {
                                'fill-color': [
                                    'case',
                                    ['has', 'fill'],
                                    ['get', 'fill'],
                                    '#3388ff'
                                ],
                                'fill-opacity': [
                                    'case',
                                    ['has', 'fill-opacity'],
                                    ['get', 'fill-opacity'],
                                    0.6
                                ]
                            }
                        });

                        // Capa para contornos de polígonos (line)
                        map.addLayer({
                            id: `${sourceId}-polygon-outlines`,
                            type: 'line',
                            source: sourceId,
                            filter: ['==', '$type', 'Polygon'], // Filtrar solo polígonos
                            paint: {
                                'line-color': [
                                    'case',
                                    ['has', 'stroke'],
                                    ['get', 'stroke'],
                                    '#000000'
                                ],
                                'line-width': [
                                    'case',
                                    ['has', 'stroke-width'],
                                    ['get', 'stroke-width'],
                                    2
                                ],
                                'line-opacity': [
                                    'case',
                                    ['has', 'stroke-opacity'],
                                    ['get', 'stroke-opacity'],
                                    1
                                ]
                            }
                        });

                        // Capa para líneas (LineString)
                        map.addLayer({
                            id: `${sourceId}-lines`,
                            type: 'line',
                            source: sourceId,
                            filter: ['==', '$type', 'LineString'], // Filtrar solo líneas
                            paint: {
                                'line-color': [
                                    'case',
                                    ['has', 'stroke'],
                                    ['get', 'stroke'],
                                    '#000000'
                                ],
                                'line-width': [
                                    'case',
                                    ['has', 'stroke-width'],
                                    ['get', 'stroke-width'],
                                    2
                                ],
                                'line-opacity': [
                                    'case',
                                    ['has', 'stroke-opacity'],
                                    ['get', 'stroke-opacity'],
                                    1
                                ]
                            }
                        });

                        // Capa para puntos (Point)
                        map.addLayer({
                            id: `${sourceId}-points`,
                            type: 'circle',
                            source: sourceId,
                            filter: ['==', '$type', 'Point'], // Filtrar solo puntos
                            paint: {
                                'circle-radius': 5, // Tamaño del punto
                                'circle-color': [
                                    'case',
                                    ['has', 'fill'],
                                    ['get', 'fill'],
                                    '#3388ff'
                                ],
                                'circle-opacity': [
                                    'case',
                                    ['has', 'fill-opacity'],
                                    ['get', 'fill-opacity'],
                                    0.6
                                ],
                                'circle-stroke-color': [
                                    'case',
                                    ['has', 'stroke'],
                                    ['get', 'stroke'],
                                    '#000000'
                                ],
                                'circle-stroke-width': [
                                    'case',
                                    ['has', 'stroke-width'],
                                    ['get', 'stroke-width'],
                                    1
                                ]
                            }
                        });

                        // Popup para todas las capas
                        const layers = [`${sourceId}-polygons`, `${sourceId}-lines`, `${sourceId}-points`];
                        layers.forEach(layerId => {
                            map.on('click', layerId, (e) => {
                                const feature = e.features[0];
                                if (feature.properties.name) {
                                    new maplibregl.Popup()
                                        .setLngLat(e.lngLat)
                                        .setHTML(feature.properties.name)
                                        .addTo(map);
                                }
                            });

                            // Cambiar cursor al pasar el ratón
                            map.on('mouseenter', layerId, () => {
                                map.getCanvas().style.cursor = 'pointer';
                            });
                            map.on('mouseleave', layerId, () => {
                                map.getCanvas().style.cursor = '';
                            });
                        });

                    } catch (e) {
                        console.log('Error procesando KML:', e);
                    }


                }
                
            });
        });



        function limpiarMapaKML(map) {
            try {
                const layers = map.getStyle().layers;
                for (const layer of layers) {
                    if (layer.id.includes('kml-source')) { // Solo capas de KML
                        map.removeLayer(layer.id);
                    }
                }

                const sources = Object.keys(map.getStyle().sources);
                for (const source of sources) {
                    if (source.includes('kml-source')) { // Solo fuentes de KML
                        map.removeSource(source);
                    }
                }
            } catch (e) {
                console.log('Error al limpiar el mapa de KML:', e);
            }
        }


        $("#customFile").change(async function (e) {
            // Limpiar el mapa antes de procesar un nuevo archivo
            limpiarMapaKML(map);

            // Obtener el archivo KMZ seleccionado
            const file = e.target.files[0];
            if (!file) {
                console.error("No se seleccionó ningún archivo.");
                return;
            }

            try {
                // Cargar el archivo KMZ con JSZip
                const zip = await JSZip.loadAsync(file);
                let kmlFile;

                // Buscar el archivo KML dentro del KMZ
                zip.forEach((relativePath, file) => {
                    if (file.name.endsWith('.kml')) {
                        kmlFile = file;
                    }
                });

                if (!kmlFile) {
                    console.error("No se encontró un archivo KML en el KMZ.");
                    return;
                }

                // Obtener el contenido del archivo KML como texto
                const kmlText = await kmlFile.async('text');

                // Parsear el KML a DOM
                const parser = new DOMParser();
                const kmlDoc = parser.parseFromString(kmlText, 'text/xml');

                // Convertir a GeoJSON
                const geoJsonFeatures = toGeoJSON.kml(kmlDoc).features;

                // Generar un ID único para la fuente
                const sourceId = `kml-source-${Math.random().toString(36).substring(2)}`;

                // Agregar el GeoJSON como fuente al mapa
                map.addSource(sourceId, {
                    type: 'geojson',
                    data: {
                        type: 'FeatureCollection',
                        features: geoJsonFeatures
                    }
                });

                // Capa para polígonos (fill)
                map.addLayer({
                    id: `${sourceId}-polygons`,
                    type: 'fill',
                    source: sourceId,
                    filter: ['==', '$type', 'Polygon'],
                    paint: {
                        'fill-color': [
                            'case',
                            ['has', 'fill'],
                            ['get', 'fill'],
                            '#3388ff'
                        ],
                        'fill-opacity': [
                            'case',
                            ['has', 'fill-opacity'],
                            ['get', 'fill-opacity'],
                            0.6
                        ]
                    }
                });

                // Capa para contornos de polígonos (line)
                map.addLayer({
                    id: `${sourceId}-polygon-outlines`,
                    type: 'line',
                    source: sourceId,
                    filter: ['==', '$type', 'Polygon'],
                    paint: {
                        'line-color': [
                            'case',
                            ['has', 'stroke'],
                            ['get', 'stroke'],
                            '#000000'
                        ],
                        'line-width': [
                            'case',
                            ['has', 'stroke-width'],
                            ['get', 'stroke-width'],
                            2
                        ],
                        'line-opacity': [
                            'case',
                            ['has', 'stroke-opacity'],
                            ['get', 'stroke-opacity'],
                            1
                        ]
                    }
                });

                // Capa para líneas (LineString)
                map.addLayer({
                    id: `${sourceId}-lines`,
                    type: 'line',
                    source: sourceId,
                    filter: ['==', '$type', 'LineString'],
                    paint: {
                        'line-color': [
                            'case',
                            ['has', 'stroke'],
                            ['get', 'stroke'],
                            '#000000'
                        ],
                        'line-width': [
                            'case',
                            ['has', 'stroke-width'],
                            ['get', 'stroke-width'],
                            2
                        ],
                        'line-opacity': [
                            'case',
                            ['has', 'stroke-opacity'],
                            ['get', 'stroke-opacity'],
                            1
                        ]
                    }
                });

                // Capa para puntos (Point)
                map.addLayer({
                    id: `${sourceId}-points`,
                    type: 'circle',
                    source: sourceId,
                    filter: ['==', '$type', 'Point'],
                    paint: {
                        'circle-radius': 5,
                        'circle-color': [
                            'case',
                            ['has', 'fill'],
                            ['get', 'fill'],
                            '#3388ff'
                        ],
                        'circle-opacity': [
                            'case',
                            ['has', 'fill-opacity'],
                            ['get', 'fill-opacity'],
                            0.6
                        ],
                        'circle-stroke-color': [
                            'case',
                            ['has', 'stroke'],
                            ['get', 'stroke'],
                            '#000000'
                        ],
                        'circle-stroke-width': [
                            'case',
                            ['has', 'stroke-width'],
                            ['get', 'stroke-width'],
                            1
                        ]
                    }
                });

                // Popup para todas las capas
                const layers = [`${sourceId}-polygons`, `${sourceId}-lines`, `${sourceId}-points`];
                layers.forEach(layerId => {
                    map.on('click', layerId, (e) => {
                        const feature = e.features[0];
                        if (feature.properties.name) {
                            new maplibregl.Popup()
                                .setLngLat(e.lngLat)
                                .setHTML(feature.properties.name)
                                .addTo(map);
                        }
                    });

                    // Cambiar cursor al pasar el ratón
                    map.on('mouseenter', layerId, () => {
                        map.getCanvas().style.cursor = 'pointer';
                    });
                    map.on('mouseleave', layerId, () => {
                        map.getCanvas().style.cursor = '';
                    });
                });

            } catch (e) {
                console.error('Error procesando el archivo KMZ:', e);
            }
        });

    </script>

}
