@model OrionCoreCableColor.Models.Tecnico.InstalacionViewModel

@{
    ViewBag.Title = "ViewDetalleInstalacion";
}
<h2 class="text-center">Detalle Orden de Trabajo</h2>

<div class="card p-3">

    <div class="row">

        <!-- Estado de la Instalación -->
        <div class="col-lg-12">
            <div class="form-group text-center">
                <a class="btn btn-@Model.FcClase text-white w-100">Estado Actual Instalación: <b>@Model.FcDescripcion</b> </a>
            </div>
        </div>

        <!-- Cliente -->
        <div class="col-lg-4 col-md-6 col-sm-12 mb-3">
            <div class="form-group">

                <br />
                <label class="control-label font-12">Nombre Cliente</label>

                <div class="input-group">
                    @Html.EditorFor(model => model.FcNombre, new { htmlAttributes = new { @class = "form-control readOnly", @readonly = "readonly" } })
                </div>
            </div>
        </div>

        <!-- Artículos Asignados -->
        <div class="col-lg-8 col-md-6 col-sm-12 mb-3">
            <div class="form-group">

                <br />
                <label class="control-label font-12">Articulos del Cliente</label>
                <div class="input-group">
                    @Html.EditorFor(model => model.FcArticulosdelContrato, new { htmlAttributes = new { @class = "form-control readOnly", @readonly = "readonly" } })
                </div>
            </div>
        </div>
    </div>

    <!-- Tabs centrados -->
    <div class="d-flex justify-content-center">
        <ul class="nav nav-tabs mt-2" id="installationTabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="productos-tab" data-toggle="tab" href="#productos" role="tab" aria-controls="productos" aria-selected="true">Productos</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="imagenes-tab" data-toggle="tab" href="#imagenes" role="tab" aria-controls="imagenes" aria-selected="false">Imágenes</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="summary-tab" data-toggle="tab" href="#summary" role="tab" aria-controls="summary" aria-selected="false">Resumen</a>
            </li>
        </ul>
    </div>

    <div class="tab-content mt-4" id="installationTabsContent">

        <!-- Tab de Productos -->
        <div class="tab-pane fade show active" id="productos" role="tabpanel" aria-labelledby="productos-tab">
            <div class="row">
                @foreach (var item in Model.flListaMaterialesList)
                {
                    <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                        <div class="form-group">
                            <label>Cantidad @item.FcProducto</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fal fa-router fa-fw"></i></span>
                                </div>
                                @Html.EditorFor(model => item.fnCantidad, new { htmlAttributes = new { @class = "form-control", id = "cantidad-" + item.FiIDProducto, @onchange = "updateSummary(); codigobarra('" + item.FbCodigo + "','" + item.FiIDProducto + "')" } })
                            </div>
                            @Html.ValidationMessageFor(model => item.fnCantidad, "", new { @class = "text-danger" })
                        </div>
                        @if (item.FbCodigo)
                        {
                            <div id="divcodigoproducto-@item.FiIDProducto"></div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Tab de Imágenes -->
        <div class="tab-pane fade" id="imagenes" role="tabpanel" aria-labelledby="imagenes-tab">
            <div class="row">
                
                    <div class="col-lg-12 col-md-12 col-sm-12 mb-6">
                        <div class="form-group">

                            <form id="Imagen-dropzone" action="@Url.Action("FormFileResponse","Base")" method="post" enctype="multipart/form-data" class="dropzone needsclick">
                                <div class="dz-message needsclick">

                                    <div class="dz-icon">
                                        <i class="fal fa-cloud-upload text-muted mb-12"></i>
                                    </div>
                                    <div>
                                        <span class="dz-text">Arrastre Imagen</span>
                                        <p class="text-sm text-muted">O Click para elegirla manualmente</p>
                                    </div>
                                </div>
                            </form>

                        </div>
                    </div>
                
            </div>
        </div>

        <!-- Tab de Resumen -->
        <div class="tab-pane fade" id="summary" role="tabpanel" aria-labelledby="summary-tab">
            <div class="row">
                

                <div class="col-lg-12 col-md-12 col-sm-12 mb-6">
                    <div class="form-group">
                        <label>Comentario de Orden Trabajo</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-router fa-fw"></i></span>
                            </div>
                            @Html.TextAreaFor(model => model.fcComentarioInstalacion, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcComentarioInstalacion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Resumen de Productos -->
                <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                    <div class="form-group">
                        <label>Resumen de Productos</label>
                        <ul id="summary-products">
                            <!-- Aquí se actualizarán los productos -->
                        </ul>
                    </div>
                </div>

                <!-- Resumen de Imágenes -->
                <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                    <div class="form-group">
                        <label>Resumen de Imágenes</label>
                        <div id="summary-images" class="row">
                            <!-- Aquí se mostrarán las imágenes cargadas -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Botón de Finalizar -->
            <div class="row">
                <div class="col-lg-12 text-center">
                    <button id="btnGuardarForm" type="button" class="btn btn-primary w-100" onclick="Finalizar()">Enviar a Validar</button>
                </div>
            </div>
        </div>

    </div>

</div>



<!--<div class="card" style="padding-left: 1%; padding-right: 1%">
    <div class="row">

        <div class="col-lg-12">
            <div class="row">
                <div class="col-lg-12 col-12 col-sm-12 col-md-12">
                    <br />
                    <div class="col-lg-12 col-sm-12 col-md-12 col-xl-12">
                        <div class="form-group text-center">
                            <div class="input-group mar-btm ">
                                <a class="btn btn-Model.fcClase text-white col-lg-12 col-md-12">Estado Actual Instalacion: <b>Model.fcDescripcionEstado</b> </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="row">
                <div class="col-lg-12 col-12 col-sm-12 col-md-12">
                    <br />
                    <div class="col-lg-12 col-sm-12 col-md-12 col-xl-12">
                        <div class="form-group">
                            Html.LabelFor(model => model.fcCliente, htmlAttributes: new { class = "control-label font-12" })
                            <div class="input-group mar-btm">
                                Html.EditorFor(model => model.fcCliente, new { htmlAttributes = new { class = "form-control readOnly", readonly = "readonly" } })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-8">
            <div class="row">
                <div class="col-lg-12 col-12 col-sm-12 col-md-12">
                    <br />
                    <div class="col-lg-12 col-sm-12 col-md-12 col-xl-12">
                        <div class="form-group">
                            Html.LabelFor(model => model.fcArticulosAsignados, htmlAttributes: new { class = "control-label" })
                            <div class="input-group mar-btm">
                                Html.EditorFor(model => model.fcArticulosAsignados, new { htmlAttributes = new { class = "form-control readOnly", readonly = "readonly" } })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tab de Imágenes -->
<!--<div class="tab-pane fade" id="imagenes" role="tabpanel" aria-labelledby="imagenes-tab">
            <div class="row">



            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-lg-4 col-md-4">
            foreach (var item in Model.listadoMateriales)
            {
                <div class="row">
                    <div class="col-lg-12 col-12 col-sm-12 col-md-12">
                        <br />
                        <div class="col-lg-12 col-sm-12 col-md-12 col-xl-12">
                            <div class="form-group">
                                Cantidad  item.fcProducto
                                <div class="input-group mar-btm" style="width:100%;">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><i class="fal fa-router fa-fw"></i></span>
                                    </div>
                                    <input type="number" step=".01"  min="0" id="cantidad-item.fiIDProducto" class="form-control" />
                                    Html.EditorFor(model => item.fnCantidad, new { htmlAttributes = new { class = "form-control", id = "cantidad-" + item.fiIDProducto, onchange = "codigobarra('" + item.fbCodigo + "','" + item.fiIDProducto + "')" } })
                                </div>
                                Html.ValidationMessageFor(model => item.fnCantidad, "", new { class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                if (item.fbCodigo)
                {
                    <div id="divcodigoproducto-item.fiIDProducto">
                    </div>
                }
            }
        </div>
        <div class="col-lg-8 col-md-8">
            <h2 class="text-center">Fotografias Requeridas</h2>
            <div class="row">

                <div class="col-lg-12 col-12 col-sm-12 col-md-12">
                    <br />
                    <div class="col-lg-12 col-sm-12 col-md-12 col-xl-12">
                        <div class="form-group text-center">


                            <label class="control-label text-center">Subir Fotos </label>


                            <form id="Imagen-dropzone" action="Url.Action("FormFileResponse","Base")" method="post" enctype="multipart/form-data" class="dropzone needsclick">
                                <div class="dz-message needsclick">

                                    <div class="dz-icon">
                                        <i class="fal fa-cloud-upload text-muted mb-3"></i>
                                    </div>
                                    <div>
                                        <span class="dz-text">Arrastre Imagen</span>
                                        <p class="text-sm text-muted">O Click para elegirla manualmente</p>
                                    </div>
                                </div>
                            </form>
                            <canvas src="#" style="display: block" alt="Mi identidad" id="fotopreviacanva" class="img-thumbail"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4 col-md-4">
            <div class="row">
                <div class="col-lg-12 col-12 col-sm-12 col-md-12">
                    <br />
                    <div class="col-lg-12 col-sm-12 col-md-12 col-xl-12">
                        <div class="form-group">
                            Comentario de instalación
                            <div class="input-group mar-btm" style="width:100%;">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fal fa-router fa-fw"></i></span>
                                </div>
                                Html.TextAreaFor(model => model.fcComentarioInstalacion, new { class = "form-control" })
                            </div>
                            Html.ValidationMessageFor(model => model.fcComentarioInstalacion, "", new { class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br />
    <div class="row">
        <div class="col-lg-12 col-md-12">
            <button id="btnGuardarForm" type="button" class="btn btn-primary text-center col-lg-12 col-md-12 " onclick="Finalizar()">Enviar a Validar</button>
        </div>
    </div>
    <br />
</div>-->



@Scripts.Render("~/bundles/jqueryval")
<script src="~/Content/js/loading/loading.js"></script>
@section Scripts{
    <script>
        var listadoFotos = JSON.parse('@Html.Raw(Json.Encode(Model.flListadoFotosList))')
        var listadoMateriales = JSON.parse('@Html.Raw(Json.Encode(Model.flListaMaterialesList))')
        var listaCodigoBarras = JSON.parse('@Html.Raw(Json.Encode(ViewBag.CodigoBarra))')
        var listaCodigoBarrasSend = [];
        var fotosredimencionadas = [];


        var archivosSubidos = []; // Array para guardar los archivos

        myDropzone = $('#Imagen-dropzone').dropzone({
            autoProcessQueue: true,
            uploadMultiple: true,
            acceptedFiles: "image/*,video/*,.pdf,.doc,.docx,.xls,.xlsx,.rar,.zip,.7z",
            addRemoveLinks: true,
            dictMaxFilesExceeded: "Maximum upload limit reached",
            dictInvalidFileType: "Invalid file type",

            init: function () {
                var myDropzone = this;

                // Limitar a 1 archivo máximo si se desea
                myDropzone.on('maxfilesexceeded', function (file) {
                    this.removeAllFiles();
                    this.addFile(file);
                });

                // Manejar cada archivo agregado
                myDropzone.on('addedfile', function (file) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        // Obtener solo la parte base64 después de la coma
                        var base64String = e.target.result.split(',')[1];
                        var tipoarchivo = file.type.split('/')[0]; // Identificar tipo general (image, video, etc.)

                        // Agregar al array con los detalles requeridos
                        archivosSubidos.push({
                            fcNombreArchivo: file.name,
                            fcbase64: base64String,
                            fcExtension: file.name.split('.').pop(), // Obtener extensión del archivo
                            fbEsImagen: tipoarchivo === "image" // True si es una imagen
                        });
                        updateSummary();
                        
                        //console.log(prueba.length);
                        //console.log(archivosSubidos); // Ver el array en consola
                    };

                    // Leer cualquier tipo de archivo como base64
                    reader.readAsDataURL(file);
                });

                // Remover archivo de la vista y del array al quitarlo
                myDropzone.on('removedfile', function (file) {
                    var index = archivosSubidos.findIndex(f => f.nombreArchivo === file.name);
                    if (index !== -1) archivosSubidos.splice(index, 1);

                    var _ref = file.previewElement;
                    return _ref != null ? _ref.parentNode.removeChild(file.previewElement) : void 0;
                });
            }
        });



        for (var i = 0; i < listadoFotos.length; i++) {

        let name = i + 1;
        }
        var ListadoMaterialesSEND = [];
        for (var i = 0; i < listadoMateriales.length; i++) {
            debugger;
            //let name = i + 1;
            ListadoMaterialesSEND.push({
                fiIDMarca: listadoMateriales[i].fiIDMarca, fiIDProducto: listadoMateriales[i].fiIDProducto,
                fcProducto: listadoMateriales[i].fcProducto, fnCantidad: $("#cantidad-" + listadoMateriales[i].fiIDProducto).val()
            });

            if (listadoMateriales[i].fbCodigo) {
                codigobarra(`${listadoMateriales[i].fbCodigo}`, `${listadoMateriales[i].fiIDProducto}`);
            }
        }


        //$("#btnGuardarForm").click(function () {
        //    Finalizar()
        //})

        function Finalizar()
        {
            debugger
            H5_loading.show();
            var model = @Html.Raw(Json.Encode(Model));
            $("#btnGuardarForm").hide();
            let listadoFotosSend = [];

            var comentario = $(`#fcComentarioInstalacion`).val();

            if (comentario = "" || comentario == null) {
                $("#btnGuardarForm").show();
                H5_loading.hide();
                return ToastrError("Error", "Escriba un comentario");
            }


            var listaMateriales = [];

            for (const item of listadoMateriales) {
                let seriesArray = []; // Usamos un array para las series

                if (item.FbCodigo) {
                    for (let j = 0; j < $("#cantidad-" + item.FiIDProducto).val(); j++) {
                        let exis = $(`#codigobarra-${item.FiIDProducto}-${j}`).val();

                        if (!exis)// para validar si es null, undefined o ""
                        {
                            $("#btnGuardarForm").show();
                            return ToastrError("Error", "Hay Materiales que requieren series, en caso de que no, coloque la cantidad en 0");
                        } else {
                            seriesArray.push({
                                "FiProducto": item.FiIDProducto,
                                "Serie": exis
                            });
                        }
                    }
                }

                // Agregamos el objeto actual al array de listaMateriales
                listaMateriales.push({
                    "FiProducto": item.FiIDProducto,
                    "FcProducto": item.FcProducto,
                    "Cantidad": parseFloat(document.getElementById("cantidad-" + item.FiIDProducto).value),
                    "FbCodigo": item.FbCodigo,
                    "Series": seriesArray.length > 0 ? JSON.stringify(seriesArray) : '[]' // Serializamos solo si hay series
                });
            }

            // Convertimos la lista a JSON
            var listaMaterialesJSON = JSON.stringify(listaMateriales);

            var listaimagenes = [];//`[`
            for (const item of archivosSubidos) {
                listaimagenes.push({
                    //"FiIDCatalogo_FotosInstalacion": item.numimagen,
                    "FcNombreFoto": item.fcNombreArchivo,
                    "base64": item.fcbase64
                });
            }

            var form_data = new FormData();

            // Convertir la lista de imágenes en JSON y añadirla como un campo
            var listaimagenesJSON = JSON.stringify(listaimagenes);
            
            
            form_data.append("FiIDContratistaSolicitud",'@Model.FiIDContratistaSolicitud');
            form_data.append("FiIDSolicitud",@Model.FiIDSolicitud);
            form_data.append("fcComentarioInstalacion", `${$("#fcComentarioInstalacion").val()}`);
            form_data.append("ListaMateriales", listaMaterialesJSON);
            form_data.append("ListadoFotos", listaimagenesJSON);




            if (archivosSubidos.length == 0) {
                $("#btnGuardarForm").show();
                H5_loading.hide();
                return ToastrError("Error", "Suba las Fotografias Requeridas");
            } else {

            //empieza

             let url = '@Url.Action("TerminarOrdenDeTrabajo", "Tenico")';
                $.ajax({
                    url: url,
                    type: 'POST',
                    data: form_data,
                    cache: false,
                    contentType: false,
                    processData: false,
                    enctype: "multipart/form-data",
                    success: function (data) {
                        H5_loading.hide();
                        ToastrSuccess("Listo!", data.Titulo);
                        EsperarParaEjecutarFuncion(3, function () { RedireccionarAPagina("Tenico", "BandejaOrdenesTrabajoAsignadasTecnico") });
                    }, error: function () {
                        ToastrError("Error", resp.Mensaje);
                        $("#btnGuardarForm").show();
                    }
                });
            }
        }


        function RedireccionarAPagina(controlador, vista) {
            window.location = '@Url.Action("BandejaSolicitudesAsignadasTecnico","Tenico")';

        }

        function EsperarParaEjecutarFuncion(segundos, Callbackfuncion) {
            setTimeout(() => {
                Callbackfuncion();
            }, segundos*1000);
        }

    //    function IsNullOrEmptyOr0(valor)
    //{

    //    if (typeof valor == "string") {
    //        valor = valor.trim();
    //    }

    //    if (valor == "" || valor == null || valor == 0 || valor == "0")
    //    {
    //        return true;
    //    } else {
    //        return false;
    //    }
    //}

        //creo que ya no se usa
        function SubirFotos1a1(fiIDSolicitudContratista, numeroFoto, Dropzone_, contadorCatalogoInstalacion) {
            var form_data = new FormData();
            debugger

                form_data.append("fiIDSolicitudContratista", fiIDSolicitudContratista);
                //form_data.append(`Archivo`, Dropzone_[0].dropzone.files[0])
                form_data.append(`Archivo`, Dropzone_)
                form_data.append(`fiIDCatalogo_FotosInstalacion`, contadorCatalogoInstalacion);
                form_data.append(`numeroFoto`, numeroFoto);
                $.ajax({
                    url: '@Url.Action("GuardarFotoInstalacion")',
                    type: 'POST',
                    data: form_data,
                    cache: false,
                    contentType: false,
                    processData: false,
                    enctype: "multipart/form-data",
                    success: function (data) {


                    }, error: function () {
                       // ToastrError("Error", resp.Mensaje);
                       $("#btnGuardarForm").show();
                    }
                });
        }


        function RedimencionarImagen(idcanva, eimagencaptada, idimg) {
            debugger;
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext('2d'); // capturamos el id del camva para ponerlo la imagen oculta ahi y asi poder tomar esa imagen y no la que se esta mostrando
            var img = new Image;
            img.src = URL.createObjectURL(eimagencaptada); // insertamos la imagen que el cliente subio para posteriormente hacer la reduccion
            img.onload = function () {
                //var canvas = document.getElementById(idcanva);
                var maxAncho = 900; //aqui le ponemos unas medidas estandar que pueden cambiar en un futuro,
                var maxAlto = 1500;

                var proporcion = Math.min(maxAncho / img.width, maxAlto / img.height); // aqui hacemos una proporcion de las imagenes con respecto al tamaño de la imagen original y al estandar que tenemos nosotros aqui adentro
                var propdos = img.width / img.height;
                var ancho = img.width * proporcion;
                var alto = img.height * proporcion;

                canvas.width = (img.width / propdos); // ponemos el tamaño en el canva oculto
                canvas.height = (img.height / propdos);

                ctx.drawImage(img, 0, 0, (img.width / propdos), (img.height / propdos));
                //console.log(canvas.toDataURL('image/jpeg', 0.7)); // tira el base 64

                var urlbase64 = getBase64Image(img); // tira el base 64
                console.log(canvas.toDataURL('image/jpeg', 0.7)); // aqui para saber el base64 de la imagen
                fotosredimencionadas.push(canvas.toDataURL('image/jpeg', 0.7));
                return ctx;
                //document.getElementById(idimg).src = canvas.toDataURL('image/jpeg', 0.7); // el 07 es la calidad de la imagen si no estoy mal eso decia en la documentacion
                //document.getElementById(idcanva).style.display = "block"; //mostrar la imagen que esta oculta
            }
        }

        function getBase64Image(img) {
            var canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0);
            var dataURL = canvas.toDataURL();
            return dataURL;
        }


        function dataURLtoFile(dataurl, filename) {
            var arr = dataurl.split(','),
                mime = arr[0].match(/:(.*?);/)[1],
                bstr = atob(arr[arr.length - 1]),
                n = bstr.length,
                u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr], filename, { type: mime });
        }

        function codigobarra(codigobarra, idproducto) {
            console.log(listaCodigoBarras);
            if (codigobarra) {
                var opt = "";
                $(`#divcodigoproducto-${idproducto}`).empty();
                var cont = $(`#cantidad-${idproducto}`).val();
                var opselect = "";

                for (const item of listaCodigoBarras) {
                    if (item.fiIDProducto == idproducto) {
                        //opselect += `<option value ="${item.fiIDMovimiento}">${item.Serie}</option>`
                    }
                        opselect += `<option value ="${item.fiIDMovimiento}">${item.Serie}</option>`
                }

                for (var i = 0; i < cont; i++) {


                    opt = $(`<div class="row">
                            <div class="col-lg-12 col-12 col-sm-12 col-md-12">
                                <br />
                                <div class="col-lg-12 col-sm-12 col-md-12 col-xl-12">
                                    <div class="form-group">
                                        Codigo Barra #${i + 1}
                                        <div class="input-group mar-btm" style="width:100%;">

                                            <select id="codigobarra-${idproducto}-${i}" class="form-control select2" >
                                                ${opselect}
                                            </select>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>`);

                    $(`#divcodigoproducto-${idproducto}`).append(opt);
                }

                for (const intem of $(".select2").toArray()) {
                    $(intem).select2();
                }

                //$(`.select2`).select2({
                //    dropdownParent: $("#MyModalBig")
                //});
            }
        }

        // Actualizar el resumen de productos e imágenes
        function updateSummary() {
            // Actualizar el resumen de productos
            var summaryProducts = document.getElementById("summary-products");
            summaryProducts.innerHTML = ""; // Limpiar el resumen actual
            listadoMateriales.forEach(function (item) {
                var cantidad = document.getElementById("cantidad-" + item.FiIDProducto).value;
                var li = document.createElement("li");
                li.textContent = item.FcProducto + ": " + cantidad + " unidades";
                summaryProducts.appendChild(li); // Agregar cada producto al resumen
            });

            // Actualizar el resumen de archivos cargados usando `archivosSubidos`
            var summaryContainer = document.getElementById("summary-images");
            summaryContainer.innerHTML = ""; // Limpiar el resumen actual

            archivosSubidos.forEach(function (item) {
                var col = document.createElement("div");
                col.classList.add("col-lg-4", "col-md-6", "col-sm-12", "mb-3");

                // Crear un contenedor para el archivo
                var fileContainer = document.createElement("div");
                fileContainer.classList.add("file-preview");

                if (item.fbEsImagen) {
                    // Previsualizar imágenes
                    var img = document.createElement("img");
                    img.src = `data:image/${item.fcExtension};base64,${item.fcbase64}`; // Construir la URL base64
                    img.classList.add("img-thumbnail");
                    img.style.width = "100%";
                    img.alt = item.fcNombreArchivo;

                    fileContainer.appendChild(img);
                } else if (item.fcExtension === "mp4" || item.fcExtension === "webm" || item.fcExtension === "ogg") {
                    // Previsualizar videos
                    var video = document.createElement("video");
                    video.src = `data:video/${item.fcExtension};base64,${item.fcbase64}`; // Construir la URL base64
                    video.classList.add("video-thumbnail");
                    video.style.width = "100%";
                    video.controls = true;
                    video.alt = item.fcNombreArchivo;

                    fileContainer.appendChild(video);
                } else {
                    // Previsualizar icono genérico para otros archivos
                    var icon = document.createElement("i");
                    icon.classList.add("fas", "fa-file-alt"); // Icono de FontAwesome
                    icon.style.fontSize = "48px";
                    icon.style.color = "#007bff";

                    var text = document.createElement("p");
                    text.textContent = item.fcNombreArchivo;
                    text.style.wordWrap = "break-word";

                    fileContainer.appendChild(icon);
                    fileContainer.appendChild(text);
                }

                col.appendChild(fileContainer);
                summaryContainer.appendChild(col); // Agregar el archivo al resumen
            });
        }

    </script>
}

