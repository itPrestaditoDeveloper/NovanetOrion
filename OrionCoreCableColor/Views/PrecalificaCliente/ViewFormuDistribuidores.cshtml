@model OrionCoreCableColor.Models.Precalificado.ListDistribuidorViewModel
@{
    Layout = null;
}


<style>


    .input-validation-error {
        border: 2px solid red !important;
        box-shadow: none;
    }

    .field-validation-error {
        color: red;
        font-size: 0.9em;
        margin-top: 5px;
        display: block;
    }

    #videoContainer {
        display: none;
        width: 100%;
        max-width: 400px;
        height: 400px;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        margin-top: 10px;
        background-color: black;
    }

    #video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .image-preview-container {
        position: relative;
        display: inline-block;
        margin: 5px;
    }

    .image-preview-container img {
            width: 100px;
            height: 100px;
            border: 1px solid #ccc;
            border-radius: 4px;
     }

    .delete-image-button {
        position: absolute;
        top: 2px;
        right: 2px;
        background: black;
        color: white;
        border: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        cursor: pointer;
        font-size: 14px;
        line-height: 20px;
        text-align: center;
        padding: 0;
    }


</style>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <link href="~/Content/css/formplugins/select2/select2.bundle.css" rel="stylesheet" />
    <link href="~/Content/css/skins/skin-master.css" rel="stylesheet" />
    <link href="~/Content/js/loading/loading.css" rel="stylesheet" />
    <link media="screen, print" href="~/Content/css/notifications/toastr/toastr.css" rel="stylesheet">
    <link href="~/Content/css/notifications/sweetalert2/sweetalert2.bundle.css" rel="stylesheet" />
    <title>Registro Distribuidores</title>
    <link href="~/styles/FormularioClienteStilos.css" rel="stylesheet" />
</head>

<!--Modal body-->
<body id="contenido2">
    <div class="form-container">
        <h2 style="font-weight:bold">DISTRIBUIDORES</h2>
        <div class="form-wrapper">
            <form asp-action="Create" enctype="multipart/form-data" method="post" id="MyForm">
                <!-- Información del Representante -->
                @*<fieldset class="mb-4">*@
                <h4>DATOS REPRESENTANTE</h4>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fcIdentidadRepresentante)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-id-card fa-fw"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcIdentidadRepresentante, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ingrese identidad del representante" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcIdentidadRepresentante, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fcPrimerNombre)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-user width-1"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcPrimerNombre, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ingrese primer nombre" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcPrimerNombre, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fcSegundoNombre)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-user width-1"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcSegundoNombre, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ingrese segundo nombre" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcSegundoNombre, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fcPrimerApellido)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-user width-1"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcPrimerApellido, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ingrese primer apellido" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcPrimerApellido, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fcSegundoApellido)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-user width-1"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcSegundoApellido, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ingrese segundo apellido" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcSegundoApellido, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fcTelefonoMovil)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-phone fa-fw"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcTelefonoMovil, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ingrese teléfono móvil" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcTelefonoMovil, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.fcCorreoElectronico)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-envelope fa-fw"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcCorreoElectronico, new { htmlAttributes = new { @class = "form-control", @type = "email", @placeholder = "Ingrese su correo electrónico" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcCorreoElectronico, "", new { @class = "text-danger" })
                    </div>
                </div>
                @*</fieldset>*@

                <!-- Información del Distribuidor -->
                @*<fieldset>*@
                <h4>DATOS DEL DISTRIBUIDOR</h4>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fcNombreComercial)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-building fa-fw"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcNombreComercial, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ingrese nombre comercial" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcNombreComercial, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fcRTN)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-id-card fa-fw"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcRTN, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ingrese RTN" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcRTN, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fcTelefono)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-phone fa-fw"></i></span>
                            </div>
                            @Html.EditorFor(model => model.fcTelefono, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ingrese teléfono de la empresa" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcTelefono, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.fcDireccion)
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fal fa-map-marker fa-fw"></i></span>
                            </div>
                            @Html.TextAreaFor(model => model.fcDireccion, new { @class = "form-control", rows = 2, @placeholder = "Ingrese dirección de la empresa" })
                        </div>
                        @Html.ValidationMessageFor(model => model.fcDireccion, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    <p><strong><em>Capture 3 fotos: frente y reverso del RTN, y únicamente el frente de la identidad.</em></strong></p>
                    <div class="form-group">
                        <label for="tipoDocumento">Tipo de documento</label>
                        <select id="tipoDocumento" class="form-control input-alto">
                            <option value="5">Identidad Frente</option>
                            <option value="16">RTN Frente</option>
                            <option value="17">RTN Reverso</option>
                        </select>
                    </div>
                    <div class="button-container">
                        <button type="button" id="tomarFotoCedula" class="btn btn-orange">Abrir cámara</button>
                        <button type="button" id="captureButton" class="btn btn-orange" style="display: none;">Capturar</button>
                    </div>
                    <div id="videoContainer">
                        <video id="video" autoplay playsinline></video>
                    </div>
                    <br />


                    <div id="previewContainer" class="row mt-2"></div>
                    <input type="hidden" id="foto1" name="foto1" />
                    <input type="hidden" id="foto2" name="foto2" />
                    <input type="hidden" id="foto3" name="foto3" />



                </div>


                @*</fieldset>*@

                <div class="form-group">
                    <button id="GuardarRegistro" type="submit">Enviar</button>
                </div>

            </form>
        </div>
    </div>

    @Scripts.Render("~/scripts/external-plugins")
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Content/js/formplugins/select2/select2.bundle.js"></script>
    <script src="~/Content/js/notifications/toastr/toastr.js"></script>
    <script src="~/Content/js/notificaciones/notificaciones.js"></script>
    <script src="~/Content/js/formplugins/select2/select2.bundle.js"></script>
    <script src="~/Content/js/formplugins/datetime-picker/jquery.datetimepicker.full.min.js"></script>
    <script src="~/Template/js/Personalized/Alertas.js"></script>
    <script src="~/Content/js/notifications/sweetalert2/sweetalert2.bundle.js"></script>
    <script src="~/Content/js/loading/loading.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

    <script>

        let stream = null;
        const video = document.getElementById('video');
        const captureButton = document.getElementById('captureButton');
        const videoContainer = document.getElementById('videoContainer');
        const tomarFotoCedula = document.getElementById('tomarFotoCedula');
        const canvas = document.createElement('canvas');
        const previewContainer = document.getElementById('previewContainer');
        const tipoDocumentoSelect = document.getElementById('tipoDocumento');
        let fcComentario = '';
        const maxFotos = 3;
        let fotoCapturas = [];

        function stopStream() {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
            }
        }

        function actualizarInputsFotos() {
            for (let i = 0; i < maxFotos; i++) {
                const input = document.getElementById(`foto${i + 1}`);
                input.value = fotoCapturas[i]?.base64 || '';
            }
        }

        function eliminarFoto(index) {
            fotoCapturas.splice(index, 1);
            renderizarPreviews();
            actualizarInputsFotos();
            if (fotoCapturas.length < maxFotos) {
                captureButton.style.display = 'inline-block';
            }
        }

        function renderizarPreviews() {
            previewContainer.innerHTML = '';
            fotoCapturas.forEach((item, index) => {
                const container = document.createElement('div');
                container.className = 'image-preview-container';

                const img = document.createElement('img');
                img.src = item.base64;
                img.title = item.tipo;

                const label = document.createElement('div');
                label.style.fontSize = '0.8rem';
                //label.innerText = item.tipo;
                label.innerText = item.comentario;

                const btn = document.createElement('button');
                btn.className = 'delete-image-button';
                btn.innerHTML = '×';
                btn.onclick = () => eliminarFoto(index);

                container.appendChild(img);
                container.appendChild(btn);
                container.appendChild(label);
                previewContainer.appendChild(container);
            });
        }

        tomarFotoCedula.addEventListener('click', async function () {
            try {
                stopStream();
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    throw new Error("El navegador no soporta acceso a la cámara.");
                }

                stream = await navigator.mediaDevices.getUserMedia({
                    video: { facingMode: 'environment' }
                });

                video.srcObject = stream;
                videoContainer.style.display = 'block';
                captureButton.style.display = 'inline-block';
            } catch (error) {
                alert("No se pudo acceder a la cámara: " + error.message);
            }
        });

        captureButton.addEventListener('click', function () {
            if (fotoCapturas.length >= maxFotos) {
                alert("Solo se permiten 3 fotos.");
                return;
            }

            const tipoSeleccionado = parseInt(tipoDocumentoSelect.value);

            const yaSeleccionado = fotoCapturas.some(f => f.tipo === tipoSeleccionado);
            if (yaSeleccionado) {
                ToastrWarning("Advertencia","Este tipo de documento ya ha sido seleccionado.");
                return;
            }

            let fcComentario = '';

            switch (tipoSeleccionado) {
                case 5:
                    fcComentario = "Identidad Frente";
                    break;
                case 16:
                    fcComentario = "RTN Frente";
                    break;
                case 17:
                    fcComentario = "RTN Reverso";
                    break;
                default:
                    fcComentario = "Desconocido";
            }

            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const context = canvas.getContext('2d');
            context.drawImage(video, 0, 0, canvas.width, canvas.height);

            const imageData = canvas.toDataURL('image/jpeg');
            fotoCapturas.push({ base64: imageData, tipo: tipoSeleccionado, comentario: fcComentario });

            renderizarPreviews();
            actualizarInputsFotos();

            if (fotoCapturas.length === maxFotos) {
                stopStream();
                videoContainer.style.display = 'none';
                captureButton.style.display = 'none';
            }
        });


        window.addEventListener('beforeunload', stopStream);


        $("#GuardarRegistro").click(function (e) {
            debugger
            e.preventDefault();
            if (!$("#MyForm").valid()) {
                ToastrWarning("Advertencia", "Por favor complete todos los campos.");
                return;
            }

            var model = @Html.Raw(Json.Encode(Model));
            model.fcIdentidadRepresentante = $("#fcIdentidadRepresentante").val();
            model.fcPrimerNombre = $("#fcPrimerNombre").val();
            model.fcSegundoNombre = $("#fcSegundoNombre").val();
            model.fcPrimerApellido = $("#fcPrimerApellido").val();
            model.fcSegundoApellido = $("#fcSegundoApellido").val();
            model.fcCorreoElectronico = $("#fcCorreoElectronico").val();
            model.fcTelefonoMovil = $("#fcTelefonoMovil").val();

            model.fcNombreComercial = $("#fcNombreComercial").val();
            model.fcTelefono = $("#fcTelefono").val();
            model.fcRTN = $("#fcRTN").val();
            model.fcDireccion = $("#fcDireccion").val();

            var fotosbase = fotoCapturas.map((item, index) => {
                return {
                    base64string: item.base64,
                    nombrearchivo: item.comentario.replace(/\s+/g, '_').toLowerCase() + '.jpg',
                    numimagen: index + 1,
                    fcComentario: item.comentario,
                    fiIDDocumento: item.tipo
                };
            });


            var url = "@Url.Action("CrearDistribuidor", "PrecalificaCliente")";

            $.ajax({
                url: url,
                type: 'POST',
                data: JSON.stringify({ model: model, fotosbase: fotosbase }),
                contentType: "application/json; charset=utf-8",
                success: function (data) {

                    console.log('data:', data)
                    if (data.Estado) {
                        ToastrSuccess("Operación exitosa", data.Mensaje);
                        setTimeout(function () {
                            window.location.reload();
                        }, 3000);
                    }
                    AlertaAjax(data);
                },
                error: function (data) {
                    AlertaError();
                },
            });


        });


    </script>

</body>

