@model OrionCoreCableColor.Models.DatosCliente.datosclienteViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    @Styles.Render("~/styles/externalstylesheets")
    <link href="~/Content/css/formplugins/select2/select2.bundle.css" rel="stylesheet" />
    <link href="~/Content/css/formplugins/bootstrap-datepicker/bootstrap-datepicker.css" rel="stylesheet" />
    <link href="~/Content/css/formplugins/datetime-picker/jquery.datetimepicker.min.css" rel="stylesheet" />
    <link href="~/Content/css/skins/skin-master.css" rel="stylesheet" />
    <link href="~/Template/css/fontLetter.css" rel="stylesheet" />
    <link href="~/Template/css/themes/type-c/theme-navy.min.css" rel="stylesheet" />
    <link rel="stylesheet" media="screen, print" href="~/Content/css/miscellaneous/fullcalendar/fullcalendar.bundle.css">
    <link media="screen, print" href="~/Content/css/notifications/toastr/toastr.css" rel="stylesheet">
    <link media="screen, print" href="~/Content/css/notifications/sweetalert2/sweetalert2.bundle.css" rel="stylesheet">
    <!-- Place favicon.ico in the root directory -->
    <link rel="apple-touch-icon" sizes="180x180" href="~/Content/img/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/x-icon" href="~/Content/img/LogoCabeceraOrion.ico">
    <link rel="mask-icon" href="~/Content/img/favicon/safari-pinned-tab.svg" color="#5bbad5">
    <link rel="stylesheet" href="~/Template/plugins/ionicons/css/ionicons.css" />
    <link href="~/Content/css/statistics/chartjs/chartjs.css" rel="stylesheet" />
    <link href="~/Content/css/Reporte.css" rel="stylesheet" />

</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 mt-1 mb-1">
                <button type="button" id="btnExportarDocumento" class="btn btn-primary js-btn-next">Exportar</button>
            </div>
            <div class="col-12 mt-1 mb-1">
                <button type="button" id="btnExportarDocumentoMovil" class="btn btn-primary js-btn-next">Exportar</button>
            </div>
        </div>
		<div class="row" id="VistaGeneral">
			<div class="col-12" id="grafica1">
				<div id="panel-1" class="panel">
					<div class="panel-hdr">
						<h2>Ventas <span class="fw-300"><i>Novanet</i></span></h2>
					</div>
					<div class="panel-container show">
						<div class="panel-content">
							<div class="panel-tag">
								Proyección de Ventas del Mes: <span class="fw-300" style="font-size: 19px !important" id="txtProyeccionVentaMes"></span>
								&nbsp;&nbsp;&nbsp;&nbsp;
								Ventas del mes: <span class="fw-300" style="font-size: 19px !important" id="txtVentaMes"></span>
							</div>
							<div id="chartVenta" style="width:100%; height:auto;"></div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-12" id="grafica2">
				<div id="panel-1" class="panel">
					<div class="panel-hdr">
						<h2>Arpu <span class="fw-300"><i>Novanet</i></span></h2>
					</div>
					<div class="panel-container show">
						<div class="panel-content">
							<div class="panel-tag">
								Proyección Arpu del Mes: <span class="fw-300" style="font-size: 19px !important" id="txtProyeccionArpuMes"></span>
								&nbsp;&nbsp;&nbsp;&nbsp;
								Proyección Arpu General: <span class="fw-300" style="font-size: 15px !important" id="txtProyeccionArpu"></span>
							</div>
							<div id="chartArpu" style="width:100%; height:auto;"></div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-12" id="grafica3">
				<div id="panel-1" class="panel">
					<div class="panel-hdr">
						<h2>Mora <span class="fw-300"><i>Cliente</i></span></h2>
					</div>
					<div class="panel-container show">
						<div class="panel-content">
							<div class="panel-tag">
								Clientes en mora al cierre: <span class="fw-300" style="font-size: 19px !important" id="txtProyeccionMoraMes"></span>
							</div>
							<div id="chartMoraCliente" style="width:100%; height:auto;"></div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-12" id="grafica4">
				<div id="panel-8" class="panel">
					<div class="panel-hdr">
						<h2>Clientes <span class="fw-300"><i>Activos</i></span></h2>
					</div>
					<div class="panel-container show">
						<div class="panel-content">
							<div class="panel-tag">
								<div class="row">
									<div class="col-3">Proyección del Mes:</div>
									<div class="col-3" id="txtProyeccionMes"></div>
									<div class="col-3">Clientes:</div>
									<div class="col-3" id="txtClientesTotales"></div>
								</div>
								<div class="row">
									<div class="col-3">Proyección total:</div>
									<div class="col-3" id="txtProyeccionTotal"></div>
									<div class="col-3">Clientes Netos:</div>
									<div class="col-3" id="txtClientesNetos"></div>
								</div>
							</div>
							<div>
								<label for="filtroMeses">Mostrar últimos: </label>
								<select id="filtroMeses" class="form-control" onchange="graficaclientesactivos()">
									<option value="3">3 meses</option>
									<option value="6" selected>6 meses</option>
									<option value="12">12 meses</option>
								</select>
							</div>
							<div id="GraficaClientesActivos" style="width:100%; height:auto;"></div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-12" id="grafica5">
				<div id="panel-3" class="panel">
					<div class="panel-hdr">
						<h2>Facturación <span class="fw-300"><i>Novanet</i></span></h2>
					</div>
					<div class="panel-container show">
						<div class="panel-content">
							<div id="stackedColumnChart" style="width: 100%; height: auto;"></div>
						</div>
					</div>
				</div>
			</div>

			<div class="col-12" id="grafica6">
				<div id="panel-3" class="panel">
					<div class="panel-hdr">
						<h2>Comparativo <span class="fw-300"><i>Paquete-Servicio Mensual</i></span></h2>
					</div>
					<div class="panel-container show">
						<div class="panel-content">
							<div>
								<label for="filtroMeses2">Mostrar últimos: </label>
								<select id="filtroMeses2" class="form-control" onchange="graficaComparativaPaquetes()">
									<option value="3">3 meses</option>
									<option value="6" selected>6 meses</option>
									<option value="12">12 meses</option>
								</select>
							</div>
							<div id="GraficaComparativaPaquetes" style="width: 100%; height: 600px;"></div>
						</div>
					</div>
				</div>
			</div>

			<div class="col-12" id="grafica7">
				<div id="panel-3" class="panel">
					<div class="panel-hdr">
						<h2>Comparativo <span class="fw-300"><i>Paquete-Servicio</i></span></h2>
					</div>
					<div class="panel-container show">
						<div class="panel-content">
							<div class="row ">
								<div id="countextrachart" class="col-12 col-md-4 col-sm-12 mx-auto text-center" style="width: 100%; height: auto;"></div>
							</div>
						</div>
					</div>
				</div>
			</div>


			<div class="col-12 col-md-12" id="grafica8">
				<div id="panel-3" class="panel">
					<div class="panel-hdr">
						<h2>customer <span class="fw-300"><i>churn</i></span></h2>
					</div>
					<div class="panel-container show">
						<div class="panel-content">
							<div class="panel-tag">
								<div class="row">
									<div class="col-3">Can. ultimos  30 dias:</div>
									<div class="col-3" id="txtCancelacionesMes" style="font-size: 15px !important"></div>
									<div class="col-3">% Churn ultimo 30 dias:</div>
									<div class="col-3" id="txtChurmMes" style="font-size: 15px !important"></div>
								</div>

							</div>
							<div id="graficaCancelaciones" style="width: 100%; height: 600px;"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
    </div>


    @Scripts.Render("~/scripts/external-plugins")
    @Scripts.Render("~/bundles/personalized")
    <script src="~/Content/js/datagrid/datatables/datatables.bundle.js"></script>
    <script src="~/Content/js/formplugins/select2/select2.bundle.js"></script>
    <script src="~/Content/js/formplugins/bootstrap-datepicker/bootstrap-datepicker.js"></script>
    <script src="~/Content/js/dependency/moment/moment.js"></script>
    <script src="~/Content/js/notifications/toastr/toastr.js"></script>
    <script src="~/Content/js/notifications/sweetalert2/sweetalert2.bundle.js"></script>
    <script src="~/Content/js/notificaciones/notificaciones.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <script src="~/Content/js/statistics/chartjs/chartjs.bundle.js"></script>
    <script src="~/Scripts/accounting/accounting.min.js"></script>
    <script src="~/Content/js/statistics/ApexchartEchoaMano.js"></script>
    <script src="~/Content/js/statistics/html2pdf/html2pdf.bundle.js"></script>
    <script src="~/Content/js/statistics/jspdf.js"></script>
    <script src="~/Content/js/statistics/html2canvas.js"></script>

	<script>
		$(document).ready(function () {
			graficaclientesactivos();
			grafVenta();
			grafArpu();
			grafMoraClientes();
			graficaComparativaPaquetes();
			grafFacturacion();
			graficaCancelaciones();
			graficaClientesProducto();
			graficaValorVidaUtil();

			// Ajustar la altura de todos los paneles a la altura máxima
			var heights = $(".panel-container").map(function () {
				return $(this).height();
			}).get();
			var maxHeight = Math.max.apply(null, heights);
			$(".panel-container").height(maxHeight);
		});

        //------------------------------------------------------------------------------------------------------------------------------------------------

          /* Venta */
        function grafVenta() {
        $.ajax({
            url: "@Url.Action("DashBoardInformativo", "Reportes")",
            type: "POST",
            success: function (respuesta) {

                var datos = respuesta;
                console.log(datos);
                var mes = [];
                var valor = [];
                for (var item of datos.DataVentas) {
                    mes.push(item.fcMes)
                    valor.push(item.fiConteoVentas)

                }
                $("#txtProyeccionVentaMes").text(datos.fiProyeccionVentas);
                $("#txtVentaMes").text(datos.fiClientesNuevosMes);
                $("#txtProyeccionArpuMes").text(datos.fnValorARPUDelMes);
                $("#txtProyeccionArpu").text(datos.fnValorARPUGeneral);

                $("#txtProyeccionMes").text(datos.fiProyeccionVentas);
                $("#txtClientesTotales").text(datos.fiClientesActivos);
                $("#txtProyeccionTotal").text(datos.fiProyeccionVentasAcumulada);
                $("#txtClientesNetos").text(datos.fiClientesNetos);
                $("#txtCancelacionesMes").text(datos.fiCancelacion1Mes);
                $("#txtChurmMes").text(datos.fiChurnRate1Mes );

                grafVentaLlenado();
            },
            error: function (respuesta) {
                console.log(respuesta)
            }
        });


        }

         function grafVentaLlenado() {
    $.ajax({
        url: "@Url.Action("GraficaVentas", "Reportes")",
        type: "POST",
        success: function (respuesta) {
            var datos = respuesta;

            var meses = [
                "enero", "febrero", "marzo", "abril", "mayo", "junio",
                "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"
            ];
            var valoresActual = new Array(12).fill(0);
            var valoresAnterior = new Array(12).fill(0);
            var tooltipsVariacion = new Array(12).fill({ actual: 0, anterior: 0, variacion: "N/A" });

            var datosActual = datos.find(x => x.TipoAnio === 'Actual')?.Meses || [];
            var datosAnterior = datos.find(x => x.TipoAnio === 'Anterior')?.Meses || [];

            // Llenar datos del año actual
            datosActual.forEach(actual => {
                var index = meses.indexOf(actual.FcMes.toLowerCase());
                if (index !== -1) {
                    valoresActual[index] = actual.FiConteoMensual || 0;
                    tooltipsVariacion[index] = { ...tooltipsVariacion[index], actual: actual.FiConteoMensual || 0 };
                }
            });

            // Llenar datos del año anterior
            datosAnterior.forEach(anterior => {
                var index = meses.indexOf(anterior.FcMes.toLowerCase());
                if (index !== -1) {
                    valoresAnterior[index] = anterior.FiConteoMensual || 0;
                    tooltipsVariacion[index] = { ...tooltipsVariacion[index], anterior: anterior.FiConteoMensual || 0 };
                    var variacion = valoresAnterior[index] > 0
                        ? (((valoresActual[index] - valoresAnterior[index]) / valoresAnterior[index]) * 100).toFixed(1)
                        : "N/A";
                    tooltipsVariacion[index].variacion = variacion;
                }
            });

            // Crear gráfico
            var options = {
                series: [
			        {
				        name: '2024',
				        data: valoresAnterior,
				        type: 'area',
				        color: 'rgba(128,128,128,0.2)',
				        stroke: {
					        width: 2,
					        colors: ['#aaaaaa']
				        },
				        fill: {
					        type: 'solid',
					        colors: ['rgba(128,128,128,0.2)']
				        }
			        },
			        {
				        name: '2025',
				        data: valoresActual,
				        type: 'bar',
				        color: '#faa61c',
				        // Configuración específica para las etiquetas de las barras
				        dataLabels: {
					        enabled: true,
					        offsetY: -5, // Ajusta la posición vertical
					        formatter: function (val) {
						        return val; // Muestra el valor numérico
					        },
					        style: {
						        fontSize: '12px',
						        fontWeight: 'bold',
						        colors: ['#000'] // Color del texto
					        }
				        }
			        }
                ],
                chart: {
                    height: 400,
                    toolbar: { show: true },
                    zoom: { enabled: true }
                },
                tooltip: {
                    custom: function ({ dataPointIndex }) {
                        const info = tooltipsVariacion[dataPointIndex];
                        return `<div style="padding: 5px;">
                            <strong>${meses[dataPointIndex]}</strong><br>
                            2025: ${info.actual}<br>
                            2024: ${info.anterior}<br>
                            Variación: ${info.variacion}%
                        </div>`;
                    }
                },
                plotOptions: {
                    bar: {
                        horizontal: false,
                        borderRadius: 6,
                        columnWidth: '50%'
                    }
                },
		        dataLabels: {
			        enabled: true // Configuración global desactivada
		        },
                xaxis: {
                    categories: meses,
                    labels: {
                        style: {
                            fontSize: '12px'
                        }
                    }
                },
                legend: {
                    position: 'bottom',
                    labels: {
                        colors: '#000'
                    }
                },
                fill: {
                    opacity: 1
                }
            };

            var chart = new ApexCharts(document.querySelector("#chartVenta"), options);
            chart.render();
        },
        error: function (respuesta) {
            console.log(respuesta);
        }
    });
}

        //------------------------------------------------------------------------------------------------------------------------------------------------

        /* line Arpu */
        function grafArpu() {
    $.ajax({
        url: "@Url.Action("GraficaArpu", "Reportes")",
        type: "POST",
        success: function (respuesta) {
            var datos = respuesta;

            var meses = [
                "enero", "febrero", "marzo", "abril", "mayo", "junio",
                "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"
            ];
            var valoresActual = new Array(12).fill(0);
            var valoresAnterior = new Array(12).fill(0);
            var tooltipsVariacion = new Array(12).fill({ actual: 0, anterior: 0, variacion: "N/A" });

            // Obtener datos del año actual (2025) y anterior (2024)
            var datosActual = datos.find(x => x.tipoAnio === 'Actual')?.meses || [];
            var datosAnterior = datos.find(x => x.tipoAnio === 'Anterior')?.meses || [];

            // Llenar datos del año actual (2025)
            datosActual.forEach(actual => {
                var index = meses.indexOf(actual.fcMes.toLowerCase());
                if (index !== -1) {
                    valoresActual[index] = actual.fnArpuMensual || 0;
                    tooltipsVariacion[index] = { ...tooltipsVariacion[index], actual: actual.fnArpuMensual || 0 };
                }
            });

            // Llenar datos del año anterior (2024)
            datosAnterior.forEach(anterior => {
                var index = meses.indexOf(anterior.fcMes.toLowerCase());
                if (index !== -1) {
                    valoresAnterior[index] = anterior.fnArpuMensual || 0;
                    tooltipsVariacion[index] = { ...tooltipsVariacion[index], anterior: anterior.fnArpuMensual || 0 };
                    var variacion = valoresAnterior[index] > 0
                        ? (((valoresActual[index] - valoresAnterior[index]) / valoresAnterior[index]) * 100).toFixed(1)
                        : "N/A";
                    tooltipsVariacion[index].variacion = variacion;
                }
            });

            // Crear gráfico
            var options = {
                series: [
                    {
                        name: '2024',
                        data: valoresAnterior,
                        type: 'area',
                        color: 'rgba(128,128,128,0.2)',
                        stroke: {
                            width: 2,
                            colors: ['#aaaaaa']
                        },
                        fill: {
                            type: 'solid',
                            colors: ['rgba(128,128,128,0.2)']
                        }
                    },
                    {
                        name: '2025',
                        data: valoresActual,
                        type: 'bar',
                        color: '#faa61c',
                        dataLabels: {
                            enabled: true,
                            offsetY: -5,
                            formatter: function (val) {
                                return val;
                            },
                            style: {
                                fontSize: '12px',
                                fontWeight: 'bold',
                                colors: ['#000']
                            }
                        }
                    }
                ],
                chart: {
                    height: 400,
                    toolbar: { show: true },
                    zoom: { enabled: true }
                },
                tooltip: {
                    custom: function ({ dataPointIndex }) {
                        const info = tooltipsVariacion[dataPointIndex];
                        return `<div style="padding: 5px;">
                            <strong>${meses[dataPointIndex]}</strong><br>
                            2025: ${info.actual}<br>
                            2024: ${info.anterior}<br>
                            Variación: ${info.variacion}%
                        </div>`;
                    }
                },
                plotOptions: {
                    bar: {
                        horizontal: false,
                        borderRadius: 6,
                        columnWidth: '50%'
                    }
                },
                dataLabels: {
                    enabled: true
                },
                xaxis: {
                    categories: meses,
                    labels: {
                        style: {
                            fontSize: '12px'
                        }
                    }
                },
                legend: {
                    position: 'bottom',
                    labels: {
                        colors: '#000'
                    }
                },
                fill: {
                    opacity: 1
                }
            };

            var chart = new ApexCharts(document.querySelector("#chartArpu"), options);
            chart.render();
        },
        error: function (respuesta) {
            console.log(respuesta);
        }
    });
}

        //------------------------------------------------------------------------------------------------------------------------------------------------

        function grafMoraClientes(){
                $.ajax({
        url: "@Url.Action("DashBoardInformativo", "Reportes")",
        type: "POST",
        success: function (respuesta) {

            var datos = respuesta;
            var mes = [];
            var valor = [];
            var PorcentajeMora = [];
            for (var item of datos.DataMora) {
                mes.push(item.fcMes)
                valor.push(item.fiClientesEnMora)
                PorcentajeMora.push(item.fnPorcentajedeMora)
            }
            $("#txtProyeccionMoraMes").text(PorcentajeMora[1]);

            LlenargrafMoraClientes();

        },
        error: function (respuesta) {
            console.log(respuesta)
        }
    });
        }
 function LlenargrafMoraClientes() {
    $.ajax({
        url: "@Url.Action("GraficaMora", "Reportes")",
        type: "POST",
        success: function (respuesta) {
            var datos = respuesta;

			var meses = [
				"enero", "febrero", "marzo", "abril", "mayo", "junio",
				"julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"
			];
			var valoresActual = new Array(12).fill(0);
			var valoresAnterior = new Array(12).fill(0);
			var tooltipsVariacion = new Array(12).fill({ actual: 0, anterior: 0, variacion: "N/A" });

			// Obtener datos del año actual (2025) y anterior (2024)
			var datosActual = datos.find(x => x.TipoAnio === 'Actual')?.Meses || [];
			var datosAnterior = datos.find(x => x.TipoAnio === 'Anterior')?.Meses || [];

			// Llenar datos del año actual (2025)
			datosActual.forEach(actual => {
				var index = meses.indexOf(actual.FcMes.toLowerCase());
				if (index !== -1) {
					valoresActual[index] = actual.FiClientesEnMora || 0;
					tooltipsVariacion[index] = { ...tooltipsVariacion[index], actual: actual.FiClientesEnMora || 0 };
				}
			});

			// Llenar datos del año anterior (2024) y calcular variación
			datosAnterior.forEach(anterior => {
				var index = meses.indexOf(anterior.FcMes.toLowerCase());
				if (index !== -1) {
					valoresAnterior[index] = anterior.FiClientesEnMora || 0;
					tooltipsVariacion[index] = { ...tooltipsVariacion[index], anterior: anterior.FiClientesEnMora || 0 };
					var variacion = valoresAnterior[index] > 0
						? (((valoresActual[index] - valoresAnterior[index]) / valoresAnterior[index]) * 100).toFixed(1)
						: "N/A";
					tooltipsVariacion[index].variacion = variacion;
				}
			});

            // Crear gráfico
            var options = {
                series: [
                    {
                        name: '2024',
                        data: valoresAnterior,
                        type: 'area',
                        color: 'rgba(128,128,128,0.2)',
                        stroke: {
                            width: 2,
                            colors: ['#aaaaaa']
                        },
                        fill: {
                            type: 'solid',
                            colors: ['rgba(128,128,128,0.2)']
                        }
                    },
                    {
                        name: '2025',
                        data: valoresActual,
                        type: 'bar',
                        color: '#faa61c',
                        dataLabels: {
                            enabled: true,
                            offsetY: -5,
                            formatter: function (val) {
                                return val;
                            },
                            style: {
                                fontSize: '12px',
                                fontWeight: 'bold',
                                colors: ['#000']
                            }
                        }
                    }
                ],
                chart: {
                    height: 400,
                    toolbar: { show: true },
                    zoom: { enabled: true }
                },
                tooltip: {
                    custom: function ({ dataPointIndex }) {
                        const info = tooltipsVariacion[dataPointIndex];
                        return `<div style="padding: 5px;">
                            <strong>${meses[dataPointIndex]}</strong><br>
                            2025: ${info.actual}<br>
                            2024: ${info.anterior}<br>
                            Variación: ${info.variacion}%
                        </div>`;
                    }
                },
                plotOptions: {
                    bar: {
                        horizontal: false,
                        borderRadius: 6,
                        columnWidth: '50%'
                    }
                },
                dataLabels: {
                    enabled: true
                },
                xaxis: {
                    categories: meses,
                    labels: {
                        style: {
                            fontSize: '12px'
                        }
                    }
                },
                legend: {
                    position: 'bottom',
                    labels: {
                        colors: '#000'
                    }
                },
                fill: {
                    opacity: 1
                }
            };

            var chart = new ApexCharts(document.querySelector("#chartMoraCliente"), options);
            chart.render();
        },
        error: function (respuesta) {
            console.log(respuesta);
        }
    });
}

        /* Venta */
        //------------------------------------------------------------------------------------------------------------------------------------------------


        	$("#filtroMeses").val(12)
    var graficaclientesactivos = function () {
    var numMeses = parseInt($("#filtroMeses").val()) || 12;

    // Mostrar loader mientras se carga
    $("#GraficaClientesActivos").html('<div class="text-center"><i class="fal fa-spinner fa-spin fa-3x"></i></div>');

    $.ajax({
        url: "@Url.Action("GraficaClientesActivos", "Reportes")",
        type: "POST",
        data: { piMeses: numMeses },
        success: function (respuesta) {
            // Verificar si hay datos válidos
            if (!respuesta || !Array.isArray(respuesta) || respuesta.length === 0) {
                $("#GraficaClientesActivos").html('<div class="alert alert-warning">No hay datos disponibles</div>');
                return;
            }

            // Procesar datos
            var mes = [], activos = [], cancelados = [];

            respuesta.forEach(function(item) {
                mes.push(`${item.fcMes} ${item.fiAno}`);
                activos.push(item.fiConteoVentas);
                cancelados.push(item.fiClientesCancelados);
            });

            // Configuración optimizada de la gráfica
            var options = {
                series: [
                    { name: 'Clientes Activos', data: activos },
                    { name: 'Clientes Cancelados', data: cancelados }
                ],
                chart: {
                    type: 'bar',
                    height: 400,
                    stacked: true,
                    toolbar: { show: true },
                    zoom: { enabled: true },
                    animations: { enabled: true },
                    id: 'clientesChart',
                    events: {
                        animationEnd: function() {
                            // Acciones después de que termine la animación
                        }
                    }
                },
                colors: ["#faa61c", "#6e6e6e"],
                plotOptions: {
                    bar: {
                        horizontal: false,
                        endingShape: 'rounded',
                        columnWidth: '70%'
                    }
                },
                dataLabels: {
                    enabled: true
                },
                stroke: {
                    show: true,
                    width: 2,
                    colors: ['transparent']
                },
                xaxis: {
                    categories: mes,
                    labels: {
                        style: { fontSize: '12px' },
                        rotate: -45,
                        hideOverlappingLabels: true,
                        trim: true
                    },
                    axisTicks: {
                        show: false
                    }
                },
                yaxis: {
                    title: { text: 'Cantidad de Clientes' },
                    labels: {
                        formatter: function(val) {
                            return Math.floor(val);
                        }
                    }
                },
                tooltip: {
                    y: {
                        formatter: function(val) {
                            return val + " clientes";
                        }
                    }
                },
                legend: {
                    position: 'top',
                    horizontalAlign: 'center',
                    markers: {
                        radius: 12
                    }
                },
                responsive: [{
                    breakpoint: 768,
                    options: {
                        chart: { height: 500 },
                        legend: { position: 'bottom' }
                    }
                }]
            };

            // Destruir gráfica existente de forma segura
            var chartElement = document.getElementById("GraficaClientesActivos");
            if (window.clientesChart) {
                try {
                    window.clientesChart.destroy();
                } catch(e) {
                    console.log("Error al destruir gráfica previa:", e);
                }
            }

            // Limpiar contenedor
            $(chartElement).html('');

            // Crear nueva instancia
            window.clientesChart = new ApexCharts(chartElement, options);
            window.clientesChart.render();
        },
        error: function(xhr, status, error) {
            console.error("Error en la petición:", status, error);
            $("#GraficaClientesActivos").html(
                '<div class="alert alert-danger">Error al cargar los datos. Intente nuevamente.</div>'
            );
        },
        complete: function() {
            // Ocultar loader al finalizar
            $(".fa-spinner").parent().hide();
        }
    });
};



	$("#filtroMeses2").val(12)

var graficaComparativaPaquetes = function () {
    var numMeses = parseInt($("#filtroMeses2").val()) || 12;

    // Mostrar loader mientras se carga
    $("#GraficaComparativaPaquetes").html('<div class="text-center"><i class="fal fa-spinner fa-spin fa-3x"></i></div>');

    $.ajax({
        url: "@Url.Action("GraficaComparativaPaquetes", "Reportes")",
        type: "POST",
        data: { piMeses: numMeses },
        success: function (respuesta) {
            // Verificar si hay datos válidos
            if (!respuesta || !Array.isArray(respuesta) || respuesta.length === 0) {
                $("#GraficaComparativaPaquetes").html('<div class="alert alert-warning">No hay datos disponibles</div>');
                return;
            }

            // Procesar datos
            var mes = [];
            var clientesConServicio = [];
            var clientesConProducto = [];

            respuesta.forEach(function (item) {
                mes.push(`${item.fcMes} ${item.fiAno}`); // Ejemplo: "Junio 2024"
                clientesConServicio.push(item.fiClientesConServicio);
                clientesConProducto.push(item.fiClientesConProducto);
            });

            // Configuración optimizada de la gráfica
            var options = {
                series: [
                    {
                        name: 'Clientes con Servicio',
                        data: clientesConServicio
                    },
                    {
                        name: 'Clientes con Producto',
                        data: clientesConProducto
                    }
                ],
                chart: {
                    type: 'bar',
                    height: 400,
                    stacked: true,
                    toolbar: { show: true },
                    zoom: { enabled: true },
                    animations: { enabled: true },
                    id: 'paquetesChart',
                    events: {
                        animationEnd: function () {
                            // Acciones después de que termine la animación
                        }
                    }
                },
				colors: ["#faa61c", "#535085"], // Colores para las dos series
                plotOptions: {
                    bar: {
                        horizontal: false,
                        endingShape: 'rounded',
                        columnWidth: '70%'
                    }
                },
                dataLabels: {
                    enabled: true,
                    formatter: function (val) {
                        return val > 0 ? val : ''; // Mostrar solo si el valor es mayor que 0
                    }
                },
                stroke: {
                    show: true,
                    width: 2,
                    colors: ['transparent']
                },
                xaxis: {
                    categories: mes,
                    labels: {
                        style: { fontSize: '12px' },
                        rotate: -45,
                        hideOverlappingLabels: true,
                        trim: true
                    },
                    axisTicks: {
                        show: false
                    }
                },
                yaxis: {
                    title: { text: 'Cantidad de Clientes' },
                    labels: {
                        formatter: function (val) {
                            return Math.floor(val);
                        }
                    }
                },
                tooltip: {
                    custom: function ({ series, seriesIndex, dataPointIndex, w }) {
                        const totalClientes = respuesta[dataPointIndex].fiTotalClientes;
                        return `<div style="padding: 5px;">
                                    <strong>${mes[dataPointIndex]}</strong><br>
                                    Clientes con Servicio: ${series[0][dataPointIndex]}<br>
                                    Clientes con Producto: ${series[1][dataPointIndex]}<br>
                                    Total Clientes: ${totalClientes}
                                </div>`;
                    }
                },
                legend: {
                    position: 'top',
                    horizontalAlign: 'center',
                    markers: {
                        radius: 12
                    }
                },
                responsive: [{
                    breakpoint: 768,
                    options: {
                        chart: { height: 500 },
                        legend: { position: 'bottom' }
                    }
                }]
            };

            // Destruir gráfica existente de forma segura
            var chartElement = document.getElementById("GraficaComparativaPaquetes");
            if (window.paquetesChart) {
                try {
                    window.paquetesChart.destroy();
                } catch (e) {
                    console.log("Error al destruir gráfica previa:", e);
                }
            }

            // Limpiar contenedor
            $(chartElement).html('');

            // Crear nueva instancia
            window.paquetesChart = new ApexCharts(chartElement, options);
            window.paquetesChart.render();
        },
        error: function (xhr, status, error) {
            console.error("Error en la petición:", status, error);
            $("#GraficaComparativaPaquetes").html(
                '<div class="alert alert-danger">Error al cargar los datos. Intente nuevamente.</div>'
            );
        },
        complete: function () {
            // Ocultar loader al finalizar
            $(".fa-spinner").parent().hide();
        }
    });
};


        //------------------------------------------------------------------------------------------------------------------------------------------------

       /* Facturacion */

        function grafFacturacion() {
    $.ajax({
        url: "@Url.Action("DashBoardInformativo", "Reportes")",
        type: "POST",
        success: function (respuesta) {
            var datos = respuesta;

            var mes = [];
            var valorIngreso = [];
            var valorAcumulado = [];
            for (var item of datos.DataIngresos) {
                mes.push(item.fcMes);
                valorIngreso.push(item.fnValorAbono);
                valorAcumulado.push(item.fnValorAbonoAcumulado);
            }

            var stackedColumnChartOptions = {
                series: [
                    {
                        name: 'Ingreso',
                        data: valorIngreso
                    },
                    {
                        name: 'Acumulado',
                        data: valorAcumulado
                    }
                ],
                chart: {
                    type: 'bar',
                    height: 350,
                    stacked: true,
                    toolbar: {
                        show: true
                    },
                    zoom: {
                        enabled: true
                    }
                },
                colors: ["#faa61c", "#2196F3"],
                responsive: [
                    {
                        breakpoint: 480,
                        options: {
                            chart: {
                                width: '100%',
                                height: 350
                            },
                            legend: {
                                position: 'bottom',
                                onItemClick: {
                                    toggleDataSeries: true
                                }
                            },
                            xaxis: {
                                labels: {
                                    rotate: -45,
                                    style: {
                                        fontSize: '10px'
                                    }
                                }
                            },
                            plotOptions: {
                                bar: {
                                    barHeight: '40%',
                                    dataLabels: {
                                        total: {
                                            enabled: true,
                                            formatter: function (value, opt) {
                                                return accounting.formatNumber(value, 2);
                                            },
                                            style: {
                                                fontSize: '10px',
                                                fontWeight: 700
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                plotOptions: {
                    bar: {
                        horizontal: false,
                        borderRadius: 10,
                        borderRadiusApplication: 'end', // 'around', 'end'
                        borderRadiusWhenStacked: 'last', // 'all', 'last'
                        barHeight: '70%', // Ajusta la altura de las barras
                        dataLabels: {
                            total: {
                                enabled: true,
                                formatter: function (value, opt) {
                                    return accounting.formatNumber(value, 2);
                                },
                                style: {
                                    fontSize: '13px',
                                    fontWeight: 900
                                }
                            }
                        }
                    }
                },
                xaxis: {
                    type: 'category',
                    categories: mes,
                    labels: {
                        rotate: -45, // Rotar las etiquetas del eje x
                        style: {
                            fontSize: '12px'
                        }
                    }
                },
                legend: {
                    position: 'right',
                    offsetY: 40
                },
                fill: {
                    opacity: 1
                }
            };

            var stackedColumnChart = new ApexCharts(document.querySelector("#stackedColumnChart"), stackedColumnChartOptions);
            stackedColumnChart.render();
        },
        error: function (respuesta) {
            console.log(respuesta);
        }
    });
        }

        //------------------------------------------------------------------------------------------------------------------------------------------------


   function graficaClientesProducto() {

    $.ajax({
          url: "@Url.Action("PaqueteServicio", "Home")",

        type: "GET",
        success: function (respuesta) {
            var resultados = respuesta.reduce(function (acumulador, solicitud) {
                if (solicitud.fcDescripcion == "Instalado" || solicitud.fcDescripcion == "Validado soporte") {
                    if (solicitud.fbArticulosExtra) {
                        acumulador.articulosExtra++;
                    } else {
                        acumulador.articulosBase++;
                    }
                }
                return acumulador;
            }, { articulosExtra: 0, articulosBase: 0 });

            var options = {
                labels: ["Clientes con Productos", "Clientes con Servicios"],
                series: [resultados.articulosExtra, resultados.articulosBase],
                colors: ['#535085', '#FAA61C'],
                plotOptions: {
                    pie: {
                        startAngle: 0,
                        endAngle: 360,
                        expandOnClick: true,
                        offsetX: 0,
                        offsetY: 0,
                        customScale: 1,
                        dataLabels: {
                            offset: 0,
                            minAngleToShowLabel: 10
                        },
                        donut: {
                            size: '65%',
                            background: 'transparent',
                            labels: {
                                show: true,
                                total: {
                                    show: true,
                                    showAlways: true,
                                    label: 'Total de Clientes',
                                    fontSize: '22px',
                                    fontFamily: 'Helvetica, Arial, sans-serif',
                                    fontWeight: 600,
                                    color: '#373d3f',
                                    formatter: function (w) {
                                        return w.globals.seriesTotals.reduce((a, b) => {
                                            return a + b;
                                        }, 0);
                                    }
                                }
                            }
                        }
                    }
                },
                chart: {
                    toolbar: {
                        show: true,
                        offsetX: 0,
                        offsetY: 0,
                        tools: {
                            download: true,
                            selection: true,
                            zoom: true,
                            zoomin: true,
                            zoomout: true,
                            pan: true,
                            reset: true | '<img src="/static/icons/reset.png" width="20">',
                            customIcons: []
                        },
                        export: {
                            csv: {
                                filename: 'Grafica',
                                columnDelimiter: ',',
                                headerCategory: 'category',
                                headerValue: 'value',
                                dateFormatter: function (timestamp) {
                                    return new Date(timestamp).toDateString();
                                }
                            },
                            svg: {
                                filename: 'Grafica',
                            },
                            png: {
                                filename: 'Grafica',
                            }
                        },
                        autoSelected: 'zoom'
                    },
                    type: 'donut',
                    width: 600,
                    height: 600
                },
                responsive: [{
                    breakpoint: 480,
                    options: {
                        chart: {
                            width: '100%',
                            height: 600
                        },
                        legend: {
                            position: 'bottom',
                            onItemClick: {
                                toggleDataSeries: true
                            }
                        }
                    }
                }]
            };

            var chart = new ApexCharts(document.querySelector("#countextrachart"), options);
            chart.render();
        },
        error: function (respuesta) {
            console.log(respuesta);
        }
    });
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------

       /* Cancelaciones */

function graficaCancelaciones() {
    $.ajax({
        url: "@Url.Action("GraficaCancelaciones", "Reportes")",
        type: "POST",
        success: function (respuesta) {
            var datos = respuesta;

            var fechas = [];
            var cancelacionServicios = [];
            var cancelacionProductos = [];
            var calculoChurnRate = []; // Nuevo arreglo para fiCalculoChurnRate

            for (var item of datos) {
                fechas.push(item.fcFechaDato);
                cancelacionServicios.push(item.fiCancelacionServicios);
                cancelacionProductos.push(item.fiCancelacionProductos);
                calculoChurnRate.push(item.fiCalculoChurnRate); // Agregamos los valores
            }

            var horizontalBarChartOptions = {
                series: [
                    {
                        name: 'Cancelación Servicios',
                        data: cancelacionServicios
                    },
                    {
                        name: 'Cancelación Productos',
                        data: cancelacionProductos
                    }
                ],
                chart: {
                    type: 'bar',
                    height: 400,
                    stacked: true,
                    toolbar: {
                        show: true
                    },
                    zoom: {
                        enabled: true
                    }
                },
                plotOptions: {
                    bar: {
                        borderRadius: 10
                    }
                },
                colors: ["#535085", "#faa61c"],
                legend: {
                    show: true,
                    position: 'bottom',
                    horizontalAlign: 'center'
                },
                xaxis: {
                    categories: fechas,
                    labels: {
                        style: {
                            fontSize: '12px'
                        }
                    }
                },
                yaxis: {
                    title: {
                        text: 'Cancelaciones'
                    }
                },
                dataLabels: {
                    enabled: true,
                    formatter: function (value, { seriesIndex, dataPointIndex, w }) {
                        // Retorna el valor normal para las series de cancelación
                        return accounting.formatNumber(value);
                    },
                    style: {
                        fontSize: '13px',
                        fontWeight: 'bold'
                    }
                },
                annotations: {
                    points: fechas.map((fecha, index) => ({
                        x: fecha, // Fecha en el eje X
                        y: cancelacionServicios[index] + cancelacionProductos[index], // Suma de las barras
                        label: {
                            text: `T ${cancelacionServicios[index] + cancelacionProductos[index]} |
                             ${calculoChurnRate[index]}%`, // Texto del churn rate
                            borderColor: '#2196F3',
                            style: {
                                color: '#2196F3',
                                fontSize: '12px'
                            },
                            offsetY: -15 // Ajuste de posición vertical
                        }
                    }))
                },
                responsive: [
                    {
                        breakpoint: 480,
                        options: {
                            chart: {
                                width: '100%',
                                height: 400
                            },
                            legend: {
                                position: 'bottom',
                                onItemClick: {
                                    toggleDataSeries: true
                                }
                            },
                            xaxis: {
                                labels: {
                                    rotate: 0,
                                    style: {
                                        fontSize: '10px'
                                    }
                                }
                            }
                        }
                    }
                ],
                fill: {
                    opacity: 1
                }
            };

            var horizontalBarChart = new ApexCharts(document.querySelector("#graficaCancelaciones"), horizontalBarChartOptions);
            horizontalBarChart.render();
        },
        error: function (respuesta) {
            console.log("Error al cargar los datos de la gráfica: ", respuesta);
        }
    });
}



	</script>


<script>
        //------------------------------------------------------------------------------------------------------------------------------------------------



        //------------------------------------------------------------------------------------------------------------------------------------------------

        $("#btnExportarDocumento").click(function () {
			exportToPDF('Contrato_General_Novanet', ['grafica1', 'grafica2', 'grafica3', 'grafica4', 'grafica5', 'grafica6', 'grafica7', 'grafica8']);
        });

        async function exportToPDF(nombreDelArchivo, idsDivs) {
            const opt = {
                margin: [0.1, 0.1, 0.1, 0.1],
                image: { type: 'jpeg', quality: 1 },
                html2canvas: {
                    dpi: 300,
                    scale: 4,
                    letterRendering: true,
                    useCORS: true
                },
                jsPDF: {
                    unit: 'in',
                    format: 'a4',
                    orientation: 'landscape'
                },
                pagebreak: { mode: ['avoid-all', 'css', 'legacy'] }
            };

            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF(opt.jsPDF.orientation, opt.jsPDF.unit, opt.jsPDF.format);
            const pdfWidth = pdf.internal.pageSize.getWidth() - opt.margin[1] - opt.margin[3];
            const pdfHeight = pdf.internal.pageSize.getHeight() - opt.margin[0] - opt.margin[2];

            const aspectRatio = 1885 / 550;

            let currentPageHeight = 0;
            const maxPageHeight = pdfHeight - opt.margin[0] - opt.margin[2];

            for (let i = 0; i < idsDivs.length; i++) {
                const element = document.getElementById(idsDivs[i]);
                const canvas = await html2canvas(element, opt.html2canvas);
                const imgData = canvas.toDataURL('image/jpeg', opt.image.quality);

                let imgWidth = pdfWidth;
                let imgHeight = imgWidth / aspectRatio;

                if (imgHeight > maxPageHeight - currentPageHeight) {
                    pdf.addPage();
                    currentPageHeight = 0;
                }

                pdf.addImage(imgData, 'JPEG', opt.margin[1], opt.margin[0] + currentPageHeight, imgWidth, imgHeight);
                currentPageHeight += imgHeight + 0.2;
            }

            pdf.save('Solicitud_' + nombreDelArchivo + '.pdf');
        }




        $("#btnExportarDocumentoMovil").click(function () {
			exportToPDFMovil('Contrato_General_Novanet', ['grafica1', 'grafica2', 'grafica3', 'grafica4', 'grafica5', 'grafica6', 'grafica7', 'grafica8']);
        });

        async function exportToPDFMovil(nombreDelArchivo, idsDivs) {
            const opt = {
                margin: [0, 0, 0, 0],
                image: { type: 'jpeg', quality: 1 },
                html2canvas: {
                    dpi: 300,
                    scale: 4,
                    letterRendering: true,
                    useCORS: true
                },
                jsPDF: {
                    unit: 'pt',
                    format: [345, 555],
                    orientation: 'portrait'
                },
                pagebreak: { mode: ['avoid-all', 'css', 'legacy'] }
            };

            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF(opt.jsPDF.orientation, opt.jsPDF.unit, opt.jsPDF.format);
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();

            for (let i = 0; i < idsDivs.length; i++) {
                const element = document.getElementById(idsDivs[i]);
                const canvas = await html2canvas(element, opt.html2canvas);
                const imgData = canvas.toDataURL('image/jpeg', opt.image.quality);

                let imgWidth = pdfWidth;
                let imgHeight = pdfHeight;

                // Solo agregamos una nueva página si no es la primera
                if (i > 0) {
                    pdf.addPage();
                }

                pdf.addImage(imgData, 'JPEG', 0, 0, imgWidth, imgHeight);
            }

            pdf.save('Solicitud_' + nombreDelArchivo + '.pdf');
        }




        function dataURLtoFile(dataurl, filename) {
            var arr = dataurl.split(','),
                mime = arr[0].match(/:(.*?);/)[1],
                bstr = atob(arr[arr.length - 1]),
                n = bstr.length,
                u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr], filename, { type: mime });
        }



    </script>
</body>
</html>