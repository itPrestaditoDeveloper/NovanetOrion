<style>
    .imgCircle {
        border-radius: 50%;
        box-shadow: 0px 0px 0px 0px #06f611;
        animation: glow 1.5s linear(0 0%, 0.02 15.85%) infinite alternate;
    }

    @@keyframes glow {
        to {
            box-shadow: 0px 0px 30px 20px #06f611;
        }
    }

    
</style>

<div class="panel">
    <div class="panel-hdr">
        <h2 class="ui-sortable-handle"> <i class="fal fa-comment-alt-lines fa-fw"></i> Mensajeria</h2>
        @*<div class="panel-toolbar " role="menu">
                <button onclick="CrearProducto()" class="btn btn-success"><i class="fal fa-plus fa-fw"></i> Registrar Producto</button>
            </div>*@
    </div>

    <div class="panel-container" style="padding-top:12px; padding-bottom:15px;">

        <div class="col-lg-12">
            <table class="table table-bordered table-hover table-striped w-100 dataTable dtr-inline" style="width:100%;" id="TablaPrincipal">
                <thead>
                    <tr>
                        <th></th>
                        <th>Codigo</th>
                        <th>Nombre</th>
                        <th>Estado</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/signalRCore/signalr.js"></script>
    <script>
        debugger;
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("@ViewBag.urlHub", {
                accessTokenFactory: () => {
                    return "@ViewBag.fcToken";
                },
                transport: signalR.HttpTransportType.LongPolling
            })
            .withAutomaticReconnect()
            .configureLogging(signalR.LogLevel.Debug)
            .build();

        connection.start()
            .then(() => console.log("Conectado a SignalR"))
            .catch(err => console.error("Error al conectar:", err));

        


        var tablaPrincipal = $('#TablaPrincipal').DataTable({
            autoWidth: true,
            responsive: true,
            language: {
                "emptyTable": "No se encontraron resultados.",
                //"searUrlh": '<div class="icon-addon addon-md"><label for="search" class="ion-search"></label>',
                "paginate": {
                    first: "Primero",
                    previous: "Anterior",
                    next: "Siguiente",
                    last: "Ultimo"
                },
                "lengthMenu": " _MENU_ ",
                "info": "Mostrando registros del _START_ al _END_ de _TOTAL_ registros totales.",
                "infoEmpty": "No hay registros para mostrar.",
            },
            dom: 'Bfrtip',
            order: [[1, "desc"]],
            ajax: {
                url: '@Url.Action("CargarListaBotsTelegram", "Mensajeria")',
                method: "Get",
                dataSrc: function (data) {
                    return data;
                }
            },

            columns: [
                {
                    data: null,
                    render: function (data) {
                        var opciones = '<div class="btn-group"> <button class="btn btn-primary btn-xs dropdown-toggle waves-effect waves-themed" data-toggle="dropdown" aria-expanded="false"> Acciones  </button>';
                        opciones += '<div class="dropdown-menu">';
                        opciones += `<a href="javascript:void(0)" class="dropdown-item" onclick="CambiarStatus('${data.fcCodigo}', this)">${data.fbEstado ? "Apagar" : "Encender"}</a>`;
                        opciones += data.fbEstado ? `<a href="javascript:void(0)" class="dropdown-item" onclick="EnviarMensaje('${data.fcCodigo}','${data.fcNombre}')">Enviar Mensaje</a>` : "";
                        opciones += '</div></div>';
                        return opciones;
                    }
                },

                {
                    data: "fcCodigo",

                },
                {
                    data: "fcNombre",
                },
                {
                    data: null,
                    className: "text-center",
                    render: function (data) {
                        return `<i id="bot-${data.fcCodigo}" class="fal fa-2xs ${data.fbEstado ? 'text-success imgCircle' : 'text-danger'} fa-circle" style="background-color: ${data.fbEstado ? '#1dc9b7' : '#fd3995'}; border-radius: 50%;"></i>`
                    }
                }

            ]

        });

        function CambiarStatus(fcCodigo,e) {
            connection.invoke("CambiarStatusBot", fcCodigo).then((result) => {

                connection.invoke("ActualizarEstadoBot", fcCodigo);

                console.log("Server method returned:", result);
            });
        }

        connection.on("ActualizarEstadoBot", function (model) {
            var tabla = $.fn.dataTable.Api("#TablaPrincipal");
            var nodes = tabla.rows().nodes().toArray();
            var row = nodes.filter(x => tabla.row(x).data().fcCodigo == model.fcCodigo);
            var data = tabla.row(row).data();
            data.fbEstado = model.fbEstado;
            tabla.row(row).data(data).draw(false);
        });


        function EnviarMensaje(fcCodigo, fcNombre)
        {
            VerModalMdConObjetoDeParametro({ fcCodigo: fcCodigo, fcNombre: fcNombre  }, "@Url.Action("EnviarMensajeTelegram", "Mensajeria")");
        }


        connection.on("RecibirMensaje", function (text)
        {
            ToastrInfo("mensaje", `De: ${text.fcDe} (${text.fcTelefono}), Para: ${text.fcPara}, mensaje: ${text.fcMensaje} `);
        });

    </script>
}