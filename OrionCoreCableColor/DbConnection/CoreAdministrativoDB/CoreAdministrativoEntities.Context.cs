//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrionCoreCableColor.DbConnection.CoreAdministrativoDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CoreAdministrativoEntities : DbContext
    {
        public CoreAdministrativoEntities()
            : base("name=CoreAdministrativoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Diario_Detalle> Diario_Detalle { get; set; }
        public virtual DbSet<Diario_Maestro> Diario_Maestro { get; set; }
        public virtual DbSet<Catalogo_Contable> Catalogo_Contable { get; set; }
        public virtual DbSet<Control_MesContable> Control_MesContable { get; set; }
    
        public virtual int sp_PartidaDiario_CrearDetalle(Nullable<short> piIDApp, Nullable<int> piIDUsuario, Nullable<int> piIDEmpresa, string pcPartida, Nullable<System.DateTime> pdFechaPartida, Nullable<int> piIDFila, string pcCuentaContable, string pcAuxiliar, string pcAuxiliarCodigo, Nullable<decimal> pnDebito, Nullable<decimal> pnCredito, string pcDebitooCredito, Nullable<decimal> pnTasadeCambio, string pcEstado, string pcTipoPartida, string pcFondo, string pcCentrodeCosto, string pcPrograma, string pcDocumento, string pcOrigen, string pcReferencia, Nullable<bool> pcExentoFactura)
        {
            var piIDAppParameter = piIDApp.HasValue ?
                new ObjectParameter("piIDApp", piIDApp) :
                new ObjectParameter("piIDApp", typeof(short));
    
            var piIDUsuarioParameter = piIDUsuario.HasValue ?
                new ObjectParameter("piIDUsuario", piIDUsuario) :
                new ObjectParameter("piIDUsuario", typeof(int));
    
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            var pcPartidaParameter = pcPartida != null ?
                new ObjectParameter("pcPartida", pcPartida) :
                new ObjectParameter("pcPartida", typeof(string));
    
            var pdFechaPartidaParameter = pdFechaPartida.HasValue ?
                new ObjectParameter("pdFechaPartida", pdFechaPartida) :
                new ObjectParameter("pdFechaPartida", typeof(System.DateTime));
    
            var piIDFilaParameter = piIDFila.HasValue ?
                new ObjectParameter("piIDFila", piIDFila) :
                new ObjectParameter("piIDFila", typeof(int));
    
            var pcCuentaContableParameter = pcCuentaContable != null ?
                new ObjectParameter("pcCuentaContable", pcCuentaContable) :
                new ObjectParameter("pcCuentaContable", typeof(string));
    
            var pcAuxiliarParameter = pcAuxiliar != null ?
                new ObjectParameter("pcAuxiliar", pcAuxiliar) :
                new ObjectParameter("pcAuxiliar", typeof(string));
    
            var pcAuxiliarCodigoParameter = pcAuxiliarCodigo != null ?
                new ObjectParameter("pcAuxiliarCodigo", pcAuxiliarCodigo) :
                new ObjectParameter("pcAuxiliarCodigo", typeof(string));
    
            var pnDebitoParameter = pnDebito.HasValue ?
                new ObjectParameter("pnDebito", pnDebito) :
                new ObjectParameter("pnDebito", typeof(decimal));
    
            var pnCreditoParameter = pnCredito.HasValue ?
                new ObjectParameter("pnCredito", pnCredito) :
                new ObjectParameter("pnCredito", typeof(decimal));
    
            var pcDebitooCreditoParameter = pcDebitooCredito != null ?
                new ObjectParameter("pcDebitooCredito", pcDebitooCredito) :
                new ObjectParameter("pcDebitooCredito", typeof(string));
    
            var pnTasadeCambioParameter = pnTasadeCambio.HasValue ?
                new ObjectParameter("pnTasadeCambio", pnTasadeCambio) :
                new ObjectParameter("pnTasadeCambio", typeof(decimal));
    
            var pcEstadoParameter = pcEstado != null ?
                new ObjectParameter("pcEstado", pcEstado) :
                new ObjectParameter("pcEstado", typeof(string));
    
            var pcTipoPartidaParameter = pcTipoPartida != null ?
                new ObjectParameter("pcTipoPartida", pcTipoPartida) :
                new ObjectParameter("pcTipoPartida", typeof(string));
    
            var pcFondoParameter = pcFondo != null ?
                new ObjectParameter("pcFondo", pcFondo) :
                new ObjectParameter("pcFondo", typeof(string));
    
            var pcCentrodeCostoParameter = pcCentrodeCosto != null ?
                new ObjectParameter("pcCentrodeCosto", pcCentrodeCosto) :
                new ObjectParameter("pcCentrodeCosto", typeof(string));
    
            var pcProgramaParameter = pcPrograma != null ?
                new ObjectParameter("pcPrograma", pcPrograma) :
                new ObjectParameter("pcPrograma", typeof(string));
    
            var pcDocumentoParameter = pcDocumento != null ?
                new ObjectParameter("pcDocumento", pcDocumento) :
                new ObjectParameter("pcDocumento", typeof(string));
    
            var pcOrigenParameter = pcOrigen != null ?
                new ObjectParameter("pcOrigen", pcOrigen) :
                new ObjectParameter("pcOrigen", typeof(string));
    
            var pcReferenciaParameter = pcReferencia != null ?
                new ObjectParameter("pcReferencia", pcReferencia) :
                new ObjectParameter("pcReferencia", typeof(string));
    
            var pcExentoFacturaParameter = pcExentoFactura.HasValue ?
                new ObjectParameter("pcExentoFactura", pcExentoFactura) :
                new ObjectParameter("pcExentoFactura", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PartidaDiario_CrearDetalle", piIDAppParameter, piIDUsuarioParameter, piIDEmpresaParameter, pcPartidaParameter, pdFechaPartidaParameter, piIDFilaParameter, pcCuentaContableParameter, pcAuxiliarParameter, pcAuxiliarCodigoParameter, pnDebitoParameter, pnCreditoParameter, pcDebitooCreditoParameter, pnTasadeCambioParameter, pcEstadoParameter, pcTipoPartidaParameter, pcFondoParameter, pcCentrodeCostoParameter, pcProgramaParameter, pcDocumentoParameter, pcOrigenParameter, pcReferenciaParameter, pcExentoFacturaParameter);
        }
    
        public virtual ObjectResult<string> sp_PartidaDiario_CrearMaestro(Nullable<short> piIDApp, Nullable<int> piIDUsuario, Nullable<int> piIDEmpresa, Nullable<System.DateTime> pdFechaPartida, string pcLote, string pcReferencia, string pcSinopsis, string pcTipoPartida, string pcEstadoPartida, Nullable<short> piMoneda, string pcAutoriza, Nullable<System.DateTime> pdFechaAutorizacion, string pcOrigen, Nullable<decimal> pnTotalPartida, string pcPartidaSeguimiento)
        {
            var piIDAppParameter = piIDApp.HasValue ?
                new ObjectParameter("piIDApp", piIDApp) :
                new ObjectParameter("piIDApp", typeof(short));
    
            var piIDUsuarioParameter = piIDUsuario.HasValue ?
                new ObjectParameter("piIDUsuario", piIDUsuario) :
                new ObjectParameter("piIDUsuario", typeof(int));
    
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            var pdFechaPartidaParameter = pdFechaPartida.HasValue ?
                new ObjectParameter("pdFechaPartida", pdFechaPartida) :
                new ObjectParameter("pdFechaPartida", typeof(System.DateTime));
    
            var pcLoteParameter = pcLote != null ?
                new ObjectParameter("pcLote", pcLote) :
                new ObjectParameter("pcLote", typeof(string));
    
            var pcReferenciaParameter = pcReferencia != null ?
                new ObjectParameter("pcReferencia", pcReferencia) :
                new ObjectParameter("pcReferencia", typeof(string));
    
            var pcSinopsisParameter = pcSinopsis != null ?
                new ObjectParameter("pcSinopsis", pcSinopsis) :
                new ObjectParameter("pcSinopsis", typeof(string));
    
            var pcTipoPartidaParameter = pcTipoPartida != null ?
                new ObjectParameter("pcTipoPartida", pcTipoPartida) :
                new ObjectParameter("pcTipoPartida", typeof(string));
    
            var pcEstadoPartidaParameter = pcEstadoPartida != null ?
                new ObjectParameter("pcEstadoPartida", pcEstadoPartida) :
                new ObjectParameter("pcEstadoPartida", typeof(string));
    
            var piMonedaParameter = piMoneda.HasValue ?
                new ObjectParameter("piMoneda", piMoneda) :
                new ObjectParameter("piMoneda", typeof(short));
    
            var pcAutorizaParameter = pcAutoriza != null ?
                new ObjectParameter("pcAutoriza", pcAutoriza) :
                new ObjectParameter("pcAutoriza", typeof(string));
    
            var pdFechaAutorizacionParameter = pdFechaAutorizacion.HasValue ?
                new ObjectParameter("pdFechaAutorizacion", pdFechaAutorizacion) :
                new ObjectParameter("pdFechaAutorizacion", typeof(System.DateTime));
    
            var pcOrigenParameter = pcOrigen != null ?
                new ObjectParameter("pcOrigen", pcOrigen) :
                new ObjectParameter("pcOrigen", typeof(string));
    
            var pnTotalPartidaParameter = pnTotalPartida.HasValue ?
                new ObjectParameter("pnTotalPartida", pnTotalPartida) :
                new ObjectParameter("pnTotalPartida", typeof(decimal));
    
            var pcPartidaSeguimientoParameter = pcPartidaSeguimiento != null ?
                new ObjectParameter("pcPartidaSeguimiento", pcPartidaSeguimiento) :
                new ObjectParameter("pcPartidaSeguimiento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_PartidaDiario_CrearMaestro", piIDAppParameter, piIDUsuarioParameter, piIDEmpresaParameter, pdFechaPartidaParameter, pcLoteParameter, pcReferenciaParameter, pcSinopsisParameter, pcTipoPartidaParameter, pcEstadoPartidaParameter, piMonedaParameter, pcAutorizaParameter, pdFechaAutorizacionParameter, pcOrigenParameter, pnTotalPartidaParameter, pcPartidaSeguimientoParameter);
        }
    
        public virtual ObjectResult<sp_Catalogo_Contable_ObtenerPorCuentaContable_Result> sp_Catalogo_Contable_ObtenerPorCuentaContable(Nullable<int> piIDEmpresa, string pcCuentaContable)
        {
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            var pcCuentaContableParameter = pcCuentaContable != null ?
                new ObjectParameter("pcCuentaContable", pcCuentaContable) :
                new ObjectParameter("pcCuentaContable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Catalogo_Contable_ObtenerPorCuentaContable_Result>("sp_Catalogo_Contable_ObtenerPorCuentaContable", piIDEmpresaParameter, pcCuentaContableParameter);
        }
    
        public virtual ObjectResult<sp_PartidaDiario_ListarDetalle_Result> sp_PartidaDiario_ListarDetalle(Nullable<int> piIDApp, Nullable<int> piIDUsuario, Nullable<int> piIDEmpresa, string pcPartida)
        {
            var piIDAppParameter = piIDApp.HasValue ?
                new ObjectParameter("piIDApp", piIDApp) :
                new ObjectParameter("piIDApp", typeof(int));
    
            var piIDUsuarioParameter = piIDUsuario.HasValue ?
                new ObjectParameter("piIDUsuario", piIDUsuario) :
                new ObjectParameter("piIDUsuario", typeof(int));
    
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            var pcPartidaParameter = pcPartida != null ?
                new ObjectParameter("pcPartida", pcPartida) :
                new ObjectParameter("pcPartida", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PartidaDiario_ListarDetalle_Result>("sp_PartidaDiario_ListarDetalle", piIDAppParameter, piIDUsuarioParameter, piIDEmpresaParameter, pcPartidaParameter);
        }
    
        public virtual ObjectResult<sp_PartidaDiario_VerDetalle_Result> sp_PartidaDiario_VerDetalle(Nullable<int> piIDApp, Nullable<int> piIDUsuario, Nullable<int> piIDEmpresa, string pcPartida, Nullable<int> piIdFila)
        {
            var piIDAppParameter = piIDApp.HasValue ?
                new ObjectParameter("piIDApp", piIDApp) :
                new ObjectParameter("piIDApp", typeof(int));
    
            var piIDUsuarioParameter = piIDUsuario.HasValue ?
                new ObjectParameter("piIDUsuario", piIDUsuario) :
                new ObjectParameter("piIDUsuario", typeof(int));
    
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            var pcPartidaParameter = pcPartida != null ?
                new ObjectParameter("pcPartida", pcPartida) :
                new ObjectParameter("pcPartida", typeof(string));
    
            var piIdFilaParameter = piIdFila.HasValue ?
                new ObjectParameter("piIdFila", piIdFila) :
                new ObjectParameter("piIdFila", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PartidaDiario_VerDetalle_Result>("sp_PartidaDiario_VerDetalle", piIDAppParameter, piIDUsuarioParameter, piIDEmpresaParameter, pcPartidaParameter, piIdFilaParameter);
        }
    
        public virtual ObjectResult<sp_PartidaDiario_VerMaestro_Result> sp_PartidaDiario_VerMaestro(Nullable<int> piIDApp, Nullable<int> piIDUsuario, Nullable<int> piIDEmpresa, string pcPartida)
        {
            var piIDAppParameter = piIDApp.HasValue ?
                new ObjectParameter("piIDApp", piIDApp) :
                new ObjectParameter("piIDApp", typeof(int));
    
            var piIDUsuarioParameter = piIDUsuario.HasValue ?
                new ObjectParameter("piIDUsuario", piIDUsuario) :
                new ObjectParameter("piIDUsuario", typeof(int));
    
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            var pcPartidaParameter = pcPartida != null ?
                new ObjectParameter("pcPartida", pcPartida) :
                new ObjectParameter("pcPartida", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PartidaDiario_VerMaestro_Result>("sp_PartidaDiario_VerMaestro", piIDAppParameter, piIDUsuarioParameter, piIDEmpresaParameter, pcPartidaParameter);
        }
    
        public virtual ObjectResult<sp_CatalogoCorrelativo_VerCorrelativo_Result> sp_CatalogoCorrelativo_VerCorrelativo(Nullable<int> piIDEmpresa, string pcPrefijoCorrelativo)
        {
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            var pcPrefijoCorrelativoParameter = pcPrefijoCorrelativo != null ?
                new ObjectParameter("pcPrefijoCorrelativo", pcPrefijoCorrelativo) :
                new ObjectParameter("pcPrefijoCorrelativo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CatalogoCorrelativo_VerCorrelativo_Result>("sp_CatalogoCorrelativo_VerCorrelativo", piIDEmpresaParameter, pcPrefijoCorrelativoParameter);
        }
    
        public virtual ObjectResult<sp_Catalogo_TipoPartida_Listar_Result> sp_Catalogo_TipoPartida_Listar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Catalogo_TipoPartida_Listar_Result>("sp_Catalogo_TipoPartida_Listar");
        }
    
        public virtual ObjectResult<sp_CuentasContables_Prestamo_Seguros_Result> sp_CuentasContables_Prestamo_Seguros(string piIDPrestamo, string pcPolizadeSeguro)
        {
            var piIDPrestamoParameter = piIDPrestamo != null ?
                new ObjectParameter("piIDPrestamo", piIDPrestamo) :
                new ObjectParameter("piIDPrestamo", typeof(string));
    
            var pcPolizadeSeguroParameter = pcPolizadeSeguro != null ?
                new ObjectParameter("pcPolizadeSeguro", pcPolizadeSeguro) :
                new ObjectParameter("pcPolizadeSeguro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CuentasContables_Prestamo_Seguros_Result>("sp_CuentasContables_Prestamo_Seguros", piIDPrestamoParameter, pcPolizadeSeguroParameter);
        }
    
        public virtual int sp_CuentasContables_Listar(Nullable<int> piIDApp, Nullable<int> piIDUsuario, Nullable<int> piIDEmpresa, Nullable<int> piIDMoneda)
        {
            var piIDAppParameter = piIDApp.HasValue ?
                new ObjectParameter("piIDApp", piIDApp) :
                new ObjectParameter("piIDApp", typeof(int));
    
            var piIDUsuarioParameter = piIDUsuario.HasValue ?
                new ObjectParameter("piIDUsuario", piIDUsuario) :
                new ObjectParameter("piIDUsuario", typeof(int));
    
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            var piIDMonedaParameter = piIDMoneda.HasValue ?
                new ObjectParameter("piIDMoneda", piIDMoneda) :
                new ObjectParameter("piIDMoneda", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CuentasContables_Listar", piIDAppParameter, piIDUsuarioParameter, piIDEmpresaParameter, piIDMonedaParameter);
        }
    
        public virtual ObjectResult<sp_CentroCosto_Listar_Result> sp_CentroCosto_Listar(Nullable<int> piIDApp, Nullable<int> piIDUsuario, Nullable<int> piIDEmpresa)
        {
            var piIDAppParameter = piIDApp.HasValue ?
                new ObjectParameter("piIDApp", piIDApp) :
                new ObjectParameter("piIDApp", typeof(int));
    
            var piIDUsuarioParameter = piIDUsuario.HasValue ?
                new ObjectParameter("piIDUsuario", piIDUsuario) :
                new ObjectParameter("piIDUsuario", typeof(int));
    
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CentroCosto_Listar_Result>("sp_CentroCosto_Listar", piIDAppParameter, piIDUsuarioParameter, piIDEmpresaParameter);
        }
    
        public virtual ObjectResult<sp_Fondos_Listar_Result> sp_Fondos_Listar(Nullable<int> piIDApp, Nullable<int> piIDUsuario, Nullable<int> piIDEmpresa)
        {
            var piIDAppParameter = piIDApp.HasValue ?
                new ObjectParameter("piIDApp", piIDApp) :
                new ObjectParameter("piIDApp", typeof(int));
    
            var piIDUsuarioParameter = piIDUsuario.HasValue ?
                new ObjectParameter("piIDUsuario", piIDUsuario) :
                new ObjectParameter("piIDUsuario", typeof(int));
    
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Fondos_Listar_Result>("sp_Fondos_Listar", piIDAppParameter, piIDUsuarioParameter, piIDEmpresaParameter);
        }
    
        public virtual ObjectResult<sp_Programas_Listar_Result> sp_Programas_Listar(Nullable<int> piIDApp, Nullable<int> piIDUsuario, Nullable<int> piIDEmpresa)
        {
            var piIDAppParameter = piIDApp.HasValue ?
                new ObjectParameter("piIDApp", piIDApp) :
                new ObjectParameter("piIDApp", typeof(int));
    
            var piIDUsuarioParameter = piIDUsuario.HasValue ?
                new ObjectParameter("piIDUsuario", piIDUsuario) :
                new ObjectParameter("piIDUsuario", typeof(int));
    
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Programas_Listar_Result>("sp_Programas_Listar", piIDAppParameter, piIDUsuarioParameter, piIDEmpresaParameter);
        }
    
        public virtual ObjectResult<sp_ObtenerTasaDeCambioMoneda_Result> sp_ObtenerTasaDeCambioMoneda(Nullable<int> piMes, Nullable<int> piAnio, Nullable<int> piPaisOrigen, Nullable<int> piPaisDestino)
        {
            var piMesParameter = piMes.HasValue ?
                new ObjectParameter("piMes", piMes) :
                new ObjectParameter("piMes", typeof(int));
    
            var piAnioParameter = piAnio.HasValue ?
                new ObjectParameter("piAnio", piAnio) :
                new ObjectParameter("piAnio", typeof(int));
    
            var piPaisOrigenParameter = piPaisOrigen.HasValue ?
                new ObjectParameter("piPaisOrigen", piPaisOrigen) :
                new ObjectParameter("piPaisOrigen", typeof(int));
    
            var piPaisDestinoParameter = piPaisDestino.HasValue ?
                new ObjectParameter("piPaisDestino", piPaisDestino) :
                new ObjectParameter("piPaisDestino", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ObtenerTasaDeCambioMoneda_Result>("sp_ObtenerTasaDeCambioMoneda", piMesParameter, piAnioParameter, piPaisOrigenParameter, piPaisDestinoParameter);
        }
    
        public virtual int sp_CorePartidas_Nuevo(Nullable<int> piIDEmpresa, string pcPartida)
        {
            var piIDEmpresaParameter = piIDEmpresa.HasValue ?
                new ObjectParameter("piIDEmpresa", piIDEmpresa) :
                new ObjectParameter("piIDEmpresa", typeof(int));
    
            var pcPartidaParameter = pcPartida != null ?
                new ObjectParameter("pcPartida", pcPartida) :
                new ObjectParameter("pcPartida", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CorePartidas_Nuevo", piIDEmpresaParameter, pcPartidaParameter);
        }
    
        public virtual int sp_PartidaDiario_ConvertirdeDolaresaLempiras(Nullable<int> piIDempresa, string pcPartidaEnDolares, Nullable<byte> piMostrarDetalle)
        {
            var piIDempresaParameter = piIDempresa.HasValue ?
                new ObjectParameter("piIDempresa", piIDempresa) :
                new ObjectParameter("piIDempresa", typeof(int));
    
            var pcPartidaEnDolaresParameter = pcPartidaEnDolares != null ?
                new ObjectParameter("pcPartidaEnDolares", pcPartidaEnDolares) :
                new ObjectParameter("pcPartidaEnDolares", typeof(string));
    
            var piMostrarDetalleParameter = piMostrarDetalle.HasValue ?
                new ObjectParameter("piMostrarDetalle", piMostrarDetalle) :
                new ObjectParameter("piMostrarDetalle", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PartidaDiario_ConvertirdeDolaresaLempiras", piIDempresaParameter, pcPartidaEnDolaresParameter, piMostrarDetalleParameter);
        }
    }
}
